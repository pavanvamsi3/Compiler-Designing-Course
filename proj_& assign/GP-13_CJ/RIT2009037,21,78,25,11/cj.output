Nonterminals useless in grammar

   SPEC


Terminals unused in grammar

   THROW
   INTERFACE
   BREAK
   JNULL
   BOOLLIT
   TRY
   CATCH
   THIS
   ELSE
   DOT
   "="
   '!'


Rules useless in grammar

  217 SPEC: '%' ID SPEC
  218     | '%' ID
  219     | '%' NUM ID SPEC
  220     | '%' NUM ID


State 54 conflicts: 5 shift/reduce
State 78 conflicts: 2 shift/reduce
State 83 conflicts: 5 shift/reduce
State 85 conflicts: 5 shift/reduce
State 94 conflicts: 5 shift/reduce
State 110 conflicts: 5 shift/reduce
State 121 conflicts: 5 shift/reduce
State 123 conflicts: 5 shift/reduce
State 146 conflicts: 1 shift/reduce
State 150 conflicts: 15 shift/reduce, 1 reduce/reduce
State 162 conflicts: 5 shift/reduce
State 180 conflicts: 1 shift/reduce
State 184 conflicts: 15 shift/reduce, 1 reduce/reduce
State 186 conflicts: 15 shift/reduce, 1 reduce/reduce
State 187 conflicts: 15 shift/reduce, 1 reduce/reduce
State 188 conflicts: 15 shift/reduce, 1 reduce/reduce
State 189 conflicts: 15 shift/reduce, 1 reduce/reduce
State 195 conflicts: 2 shift/reduce, 1 reduce/reduce
State 240 conflicts: 15 shift/reduce, 1 reduce/reduce
State 243 conflicts: 1 shift/reduce
State 254 conflicts: 12 shift/reduce
State 257 conflicts: 15 shift/reduce, 1 reduce/reduce
State 318 conflicts: 16 shift/reduce, 1 reduce/reduce
State 319 conflicts: 1 shift/reduce
State 332 conflicts: 1 shift/reduce
State 339 conflicts: 15 shift/reduce, 1 reduce/reduce
State 350 conflicts: 1 shift/reduce
State 399 conflicts: 15 shift/reduce, 17 reduce/reduce
State 411 conflicts: 15 shift/reduce, 1 reduce/reduce
State 417 conflicts: 15 shift/reduce
State 429 conflicts: 5 shift/reduce
State 430 conflicts: 15 shift/reduce
State 444 conflicts: 15 shift/reduce, 1 reduce/reduce
State 445 conflicts: 15 shift/reduce, 1 reduce/reduce
State 454 conflicts: 15 shift/reduce, 1 reduce/reduce
State 455 conflicts: 15 shift/reduce, 1 reduce/reduce
State 457 conflicts: 15 shift/reduce, 1 reduce/reduce
State 458 conflicts: 15 shift/reduce, 1 reduce/reduce
State 471 conflicts: 15 shift/reduce, 1 reduce/reduce
State 472 conflicts: 15 shift/reduce, 1 reduce/reduce
State 487 conflicts: 16 shift/reduce
State 508 conflicts: 5 shift/reduce
State 509 conflicts: 5 shift/reduce
State 510 conflicts: 5 shift/reduce
State 511 conflicts: 5 shift/reduce
State 512 conflicts: 5 shift/reduce
State 530 conflicts: 15 shift/reduce, 1 reduce/reduce
State 534 conflicts: 15 shift/reduce, 16 reduce/reduce
State 536 conflicts: 1 shift/reduce
State 559 conflicts: 1 reduce/reduce
State 561 conflicts: 15 shift/reduce
State 562 conflicts: 15 shift/reduce
State 588 conflicts: 15 shift/reduce, 1 reduce/reduce
State 589 conflicts: 15 shift/reduce, 1 reduce/reduce
State 592 conflicts: 15 shift/reduce


Grammar

    0 $accept: S $end

    1 S: HEADERS FUNC_C
    2  | FUNC_C
    3  | PACKAGES IMPORTS CLASSHEADER
    4  | PACKAGES CLASSHEADER
    5  | IMPORTS CLASSHEADER
    6  | CLASSHEADER

    7 CLASS_HIERARCHY: CLASS_HIERARCHY '.' ID
    8                | ID

    9 PACKAGES: PACKAGE CLASS_HIERARCHY ';'

   10 IMPORTS: LIB_J
   11        | LIB_J LIB_J

   12 HEADERS: LIB_C
   13        | LIB_C LIB_C

   14 LIB_C: HEADERC '<' ID '.' ID '>'

   15 LIB_J: HEADERJ CLASS_HIERARCHY ';'
   16      | HEADERJ CLASS_HIERARCHY '.' '*' ';'
   17      | HEADERJ CLASS_HIERARCHY error
   18      | HEADERJ error ';'

   19 DTYPE: INT
   20      | FLOAT
   21      | DOUBLE
   22      | CHAR
   23      | LONG
   24      | SHORT
   25      | BOOLEAN
   26      | VOID

   27 CLASSNAME: DTYPE
   28          | CLASS_HIERARCHY

   29 CNAMELIST: CLASS_HIERARCHY
   30          | CNAMELIST ',' CLASS_HIERARCHY

   31 PARAM: DTYPE ID ',' PARAM
   32      | DTYPE ID
   33      | DTYPE ID '[' NUM ']' ',' PARAM
   34      | DTYPE ID '[' ']' ',' PARAM
   35      | DTYPE ID '[' ']'
   36      | /* empty */

   37 PARAM_C: DTYPE ID ',' PARAM_C
   38        | DTYPE ID
   39        | DTYPE ID '[' NUM ']' ',' PARAM_C
   40        | DTYPE ID '[' ']' ',' PARAM_C
   41        | DTYPE ID '[' ']'
   42        | DTYPE '*' ID ',' PARAM_C
   43        | DTYPE '*' ID
   44        | /* empty */

   45 EXP: INIT2
   46    | INIT3 '(' INIT2 ')'

   47 VAR: EXP ';' VAR
   48    | EXP ';'

   49 ARG: ID_NUM ',' ARG
   50    | ID_NUM
   51    | /* empty */

   52 REA: '&' ID_NUM ',' REA
   53    | ID_NUM ',' REA
   54    | '&' ID_NUM
   55    | ID_NUM

   56 CLASSHEADER: MODIFIERS CLASS ID EXTEND INTERFACES '{' FUNC_J '}'
   57            | MODIFIERS CLASS ID EXTEND '{' FUNC_J '}'
   58            | MODIFIERS CLASS ID INTERFACES '{' FUNC_J '}'
   59            | CLASS ID EXTEND INTERFACES '{' FUNC_J '}'
   60            | MODIFIERS CLASS ID '{' FUNC_J '}'
   61            | CLASS ID EXTEND '{' FUNC_J '}'
   62            | CLASS ID INTERFACES '{' FUNC_J '}'
   63            | CLASS ID '{' FUNC_J '}'

   64 MODIFIERS: MODIFIER
   65          | MODIFIERS MODIFIER

   66 MODIFIER1: MODIFIER
   67          | MODIFIER1 MODIFIER
   68          | /* empty */

   69 MODIFIER: PUBLIC
   70         | PROTECTED
   71         | PRIVATE
   72         | STATIC

   73 EXTEND: EXTENDS CLASSNAME

   74 INTERFACES: IMPLEMENTS CNAMELIST

   75 FUNC_C: DTYPE ID '(' PARAM_C ')' '{' COND_C '}' FUNC_C
   76       | MAIN_C
   77       | DTYPE ID '(' error ')' '{' COND_C '}' FUNC_C
   78       | DTYPE error '(' PARAM_C ')' '{' COND_C '}' FUNC_C
   79       | error ID '(' PARAM_C ')' '{' COND_C '}' FUNC_C
   80       | DTYPE error '(' error ')' '{' COND_C '}' FUNC_C
   81       | error ID '(' error ')' '{' COND_C '}' FUNC_C

   82 FUNC_J: MODIFIER1 DTYPE ID '(' PARAM ')' '{' COND_J '}' FUNC_J
   83       | MAIN_J
   84       | MODIFIER1 DTYPE ID '(' error ')' '{' COND_J '}' FUNC_J
   85       | MODIFIER1 DTYPE error '(' PARAM ')' '{' COND_J '}' FUNC_J
   86       | MODIFIER1 error ID '(' PARAM ')' '{' COND_J '}' FUNC_J
   87       | MODIFIER1 DTYPE error '(' error ')' '{' COND_J '}' FUNC_J
   88       | error ID '(' error ')' '{' COND_J '}' FUNC_J
   89       | /* empty */

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}'
   92       | PUBLIC error VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}'
   93       | PUBLIC STATIC VOID error '(' STRING ID '[' ']' ')' '{' COND_J '}'
   94       | PUBLIC STATIC VOID MAIN '(' error ')' '{' COND_J '}'

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR '*' ID '[' ']' ')' '{' COND_C '}'
   96       | INT MAIN '(' ')' '{' COND_C '}'

   97 COND_C: DTYPE ID ';' COND_C
   98       | DTYPE '*' ID ';' COND_C
   99       | DTYPE ID ';'
  100       | DTYPE '*' ID ';'
  101       | DTYPE ID '[' ID_NUM ']' ';' COND_C
  102       | FOR '(' INIT1 EXP2 INIT3 ')' DEF_C
  103       | FOR '(' error EXP2 INIT3 ')' DEF_C
  104       | FOR '(' INIT1 error INIT3 ')' DEF_C
  105       | FOR '(' INIT1 EXP2 error ')' DEF_C
  106       | FOR '(' error error INIT3 ')' DEF_C
  107       | FOR '(' error EXP2 error ')' DEF_C
  108       | FOR '(' INIT1 error error ')' DEF_C
  109       | FOR '(' error error error ')' DEF_C
  110       | WHILE COND1 DEF_C
  111       | WHILE COND2 DEF_C
  112       | IF COND1 DEF_C
  113       | IF COND2 DEF_C
  114       | VAR COND_C
  115       | VAR
  116       | ID '(' '"' '%' ID '"' ',' REA ')' ';' COND_C
  117       | ID '(' '"' '%' ID '"' ',' REA ')' ';'
  118       | ID '(' '"' '%' ID '"' ',' ARG ')' ';' COND_C
  119       | ID '(' '"' '%' ID '"' ',' ARG ')' ';'
  120       | ID '(' ARG ')' ';' COND_C
  121       | ID '(' ARG ')' ';'
  122       | ID '(' '"' ID '"' ')' ';' COND_C
  123       | ID '(' '"' ID '"' ')' ';'
  124       | RET
  125       | WHILE error DEF_C
  126       | DTYPE error ';' COND_C
  127       | DTYPE '*' error ';' COND_C
  128       | DTYPE ID error COND_C
  129       | error COND_C

  130 COND_J: DTYPE ID ';' COND_J
  131       | DTYPE ID '[' ']' '=' NEW DTYPE '[' ID_NUM ']' ';' COND_J
  132       | FOR '(' INIT1 EXP2 INIT3 ')' DEF_J
  133       | WHILE COND1 DEF_J
  134       | WHILE COND2 DEF_J
  135       | IF COND1 DEF_J
  136       | IF COND2 DEF_J
  137       | RET
  138       | INIT2 ';' COND_J
  139       | INIT2 ';'
  140       | CLASS_HIERARCHY '(' ID ')' ';' COND_J
  141       | CLASS_HIERARCHY '(' '"' ID '"' ')' ';' COND_J
  142       | CLASS_HIERARCHY '(' '"' ID '"' ')' ';'
  143       | CLASS_HIERARCHY '(' ID ')' ';'
  144       | ID '(' ARG ')' ';' COND_J
  145       | ID '(' ARG ')' ';'
  146       | DTYPE ID '[' ']' error COND_J
  147       | DTYPE error ';' COND_J
  148       | DTYPE ID error COND_J
  149       | error ';' COND_J
  150       | error DEF_J

  151 DEF_C: '{' BODY_C '}'
  152      | INIT2 ';'
  153      | COND_C
  154      | /* empty */

  155 DEF_J: '{' BODY_J '}'
  156      | COND_J

  157 BODY_C: BODY_C BODY_C
  158       | INIT2 ';'
  159       | COND_C
  160       | /* empty */

  161 BODY_J: BODY_J BODY_J
  162       | COND_J
  163       | /* empty */

  164 INIT1: ID '=' INIT1 ';'
  165      | INIT1 '+' INIT1 ';'
  166      | INIT1 '-' INIT1 ';'
  167      | INIT1 '*' INIT1 ';'
  168      | INIT1 '/' INIT1 ';'
  169      | INIT1 '<' INIT1 ';'
  170      | INIT1 '>' INIT1 ';'
  171      | INIT1 LE INIT1 ';'
  172      | INIT1 GE INIT1 ';'
  173      | INIT1 EQ INIT1 ';'
  174      | INIT1 NE INIT1 ';'
  175      | INIT1 OR INIT1 ';'
  176      | INIT1 AND INIT1 ';'
  177      | ID_NUM

  178 INIT2: ID '=' INIT2
  179      | INIT2 '+' INIT2
  180      | INIT2 '-' INIT2
  181      | INIT2 '*' INIT2
  182      | INIT2 '/' INIT2
  183      | INIT2 '<' INIT2
  184      | INIT2 '>' INIT2
  185      | INIT2 LE INIT2
  186      | INIT2 GE INIT2
  187      | INIT2 EQ INIT2
  188      | INIT2 NE INIT2
  189      | INIT2 OR INIT2
  190      | INIT2 AND INIT2
  191      | INIT2 '+' '+'
  192      | INIT2 '-' '-'
  193      | ID_NUM
  194      | ID '(' ARG ')'

  195 INIT3: INIT2
  196      | /* empty */

  197 EXP2: INIT2 '<' INIT2 ';'
  198     | INIT2 '>' INIT2 ';'
  199     | INIT2 LE INIT2 ';'
  200     | INIT2 GE INIT2 ';'
  201     | INIT2 EQ INIT2 ';'
  202     | INIT2 NE INIT2 ';'
  203     | INIT2 OR INIT2 ';'
  204     | INIT2 AND INIT2 ';'

  205 COND1: '(' INIT2 '<' INIT2 ')'
  206      | '(' INIT2 '>' INIT2 ')'
  207      | '(' INIT2 LE INIT2 ')'
  208      | '(' INIT2 GE INIT2 ')'
  209      | '(' INIT2 EQ INIT2 ')'
  210      | '(' INIT2 NE INIT2 ')'
  211      | '(' INIT2 OR INIT2 ')'
  212      | '(' INIT2 AND INIT2 ')'

  213 ID_NUM: ID
  214       | NUM

  215 COND2: '(' ID_NUM ')'

  216 RET: RETURN INIT3 ';'


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'"' (34) 116 117 118 119 122 123 141 142
'%' (37) 116 117 118 119
'&' (38) 52 54
'(' (40) 46 75 77 78 79 80 81 82 84 85 86 87 88 90 91 92 93 94 95 96
    102 103 104 105 106 107 108 109 116 117 118 119 120 121 122 123
    132 140 141 142 143 144 145 194 205 206 207 208 209 210 211 212
    215
')' (41) 46 75 77 78 79 80 81 82 84 85 86 87 88 90 91 92 93 94 95 96
    102 103 104 105 106 107 108 109 116 117 118 119 120 121 122 123
    132 140 141 142 143 144 145 194 205 206 207 208 209 210 211 212
    215
'*' (42) 16 42 43 95 98 100 127 167 181
'+' (43) 165 179 191
',' (44) 30 31 33 34 37 39 40 42 49 52 53 95 116 117 118 119
'-' (45) 166 180 192
'.' (46) 7 14 16
'/' (47) 168 182
';' (59) 9 15 16 18 47 48 97 98 99 100 101 116 117 118 119 120 121
    122 123 126 127 130 131 138 139 140 141 142 143 144 145 147 149
    152 158 164 165 166 167 168 169 170 171 172 173 174 175 176 197
    198 199 200 201 202 203 204 216
'<' (60) 14 169 183 197 205
'=' (61) 131 164 178
'>' (62) 14 170 184 198 206
'[' (91) 33 34 35 39 40 41 90 91 92 93 95 101 131 146
']' (93) 33 34 35 39 40 41 90 91 92 93 95 101 131 146
'{' (123) 56 57 58 59 60 61 62 63 75 77 78 79 80 81 82 84 85 86 87
    88 90 91 92 93 94 95 96 151 155
'}' (125) 56 57 58 59 60 61 62 63 75 77 78 79 80 81 82 84 85 86 87
    88 90 91 92 93 94 95 96 151 155
error (256) 17 18 77 78 79 80 81 84 85 86 87 88 92 93 94 103 104 105
    106 107 108 109 125 126 127 128 129 146 147 148 149 150
PACKAGE (258) 9
CLASS (259) 56 57 58 59 60 61 62 63
THROW (260)
INTERFACE (261)
THROWS (262) 90
EXTENDS (263) 73
IMPLEMENTS (264) 74
MAIN (265) 90 91 92 94 95 96
HEADERC (266) 14
HEADERJ (267) 15 16 17 18
RETURN (268) 216
BREAK (269)
NEW (270) 131
JNULL (271)
LONG (272) 23
DOUBLE (273) 21
STRING (274) 90 91 92 93
INT (275) 19 95 96
FLOAT (276) 20
CHAR (277) 22 95
SHORT (278) 24
VOID (279) 26 90 91 92 93 94
BOOLEAN (280) 25
BOOLLIT (281)
PUBLIC (282) 69 90 91 92 93 94
PRIVATE (283) 71
PROTECTED (284) 70
TRY (285)
CATCH (286)
STATIC (287) 72 90 91 93 94
THIS (288)
FOR (289) 102 103 104 105 106 107 108 109 132
WHILE (290) 110 111 125 133 134
IF (291) 112 113 135 136
ELSE (292)
LE (293) 171 185 199 207
GE (294) 172 186 200 208
EQ (295) 173 187 201 209
NE (296) 174 188 202 210
OR (297) 175 189 203 211
AND (298) 176 190 204 212
ID (299) 7 8 14 31 32 33 34 35 37 38 39 40 41 42 43 56 57 58 59 60
    61 62 63 75 77 79 81 82 84 86 88 90 91 92 93 95 97 98 99 100 101
    116 117 118 119 120 121 122 123 128 130 131 140 141 142 143 144
    145 146 148 164 178 194 213
NUM (300) 33 39 214
DOT (301)
"=" (302)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
S (69)
    on left: 1 2 3 4 5 6, on right: 0
CLASS_HIERARCHY (70)
    on left: 7 8, on right: 7 9 15 16 17 28 29 30 140 141 142 143
PACKAGES (71)
    on left: 9, on right: 3 4
IMPORTS (72)
    on left: 10 11, on right: 3 5
HEADERS (73)
    on left: 12 13, on right: 1
LIB_C (74)
    on left: 14, on right: 12 13
LIB_J (75)
    on left: 15 16 17 18, on right: 10 11
DTYPE (76)
    on left: 19 20 21 22 23 24 25 26, on right: 27 31 32 33 34 35 37
    38 39 40 41 42 43 75 77 78 80 82 84 85 87 97 98 99 100 101 126
    127 128 130 131 146 147 148
CLASSNAME (77)
    on left: 27 28, on right: 73
CNAMELIST (78)
    on left: 29 30, on right: 30 74
PARAM (79)
    on left: 31 32 33 34 35 36, on right: 31 33 34 82 85 86
PARAM_C (80)
    on left: 37 38 39 40 41 42 43 44, on right: 37 39 40 42 75 78 79
EXP (81)
    on left: 45 46, on right: 47 48
VAR (82)
    on left: 47 48, on right: 47 114 115
ARG (83)
    on left: 49 50 51, on right: 49 118 119 120 121 144 145 194
REA (84)
    on left: 52 53 54 55, on right: 52 53 116 117
CLASSHEADER (85)
    on left: 56 57 58 59 60 61 62 63, on right: 3 4 5 6
MODIFIERS (86)
    on left: 64 65, on right: 56 57 58 60 65
MODIFIER1 (87)
    on left: 66 67 68, on right: 67 82 84 85 86 87
MODIFIER (88)
    on left: 69 70 71 72, on right: 64 65 66 67
EXTEND (89)
    on left: 73, on right: 56 57 59 61
INTERFACES (90)
    on left: 74, on right: 56 58 59 62
FUNC_C (91)
    on left: 75 76 77 78 79 80 81, on right: 1 2 75 77 78 79 80 81
FUNC_J (92)
    on left: 82 83 84 85 86 87 88 89, on right: 56 57 58 59 60 61 62
    63 82 84 85 86 87 88
MAIN_J (93)
    on left: 90 91 92 93 94, on right: 83
MAIN_C (94)
    on left: 95 96, on right: 76
COND_C (95)
    on left: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111
    112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127
    128 129, on right: 75 77 78 79 80 81 95 96 97 98 101 114 116 118
    120 122 126 127 128 129 153 159
COND_J (96)
    on left: 130 131 132 133 134 135 136 137 138 139 140 141 142 143
    144 145 146 147 148 149 150, on right: 82 84 85 86 87 88 90 91
    92 93 94 130 131 138 140 141 144 146 147 148 149 156 162
DEF_C (97)
    on left: 151 152 153 154, on right: 102 103 104 105 106 107 108
    109 110 111 112 113 125
DEF_J (98)
    on left: 155 156, on right: 132 133 134 135 136 150
BODY_C (99)
    on left: 157 158 159 160, on right: 151 157
BODY_J (100)
    on left: 161 162 163, on right: 155 161
INIT1 (101)
    on left: 164 165 166 167 168 169 170 171 172 173 174 175 176 177,
    on right: 102 104 105 108 132 164 165 166 167 168 169 170 171 172
    173 174 175 176
INIT2 (102)
    on left: 178 179 180 181 182 183 184 185 186 187 188 189 190 191
    192 193 194, on right: 45 46 138 139 152 158 178 179 180 181 182
    183 184 185 186 187 188 189 190 191 192 195 197 198 199 200 201
    202 203 204 205 206 207 208 209 210 211 212
INIT3 (103)
    on left: 195 196, on right: 46 102 103 104 106 132 216
EXP2 (104)
    on left: 197 198 199 200 201 202 203 204, on right: 102 103 105
    107 132
COND1 (105)
    on left: 205 206 207 208 209 210 211 212, on right: 110 112 133
    135
ID_NUM (106)
    on left: 213 214, on right: 49 50 52 53 54 55 101 131 177 193 215
COND2 (107)
    on left: 215, on right: 111 113 134 136
RET (108)
    on left: 216, on right: 124 137


state 0

    0 $accept: . S $end

    error      shift, and go to state 1
    PACKAGE    shift, and go to state 2
    CLASS      shift, and go to state 3
    HEADERC    shift, and go to state 4
    HEADERJ    shift, and go to state 5
    LONG       shift, and go to state 6
    DOUBLE     shift, and go to state 7
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHAR       shift, and go to state 10
    SHORT      shift, and go to state 11
    VOID       shift, and go to state 12
    BOOLEAN    shift, and go to state 13
    PUBLIC     shift, and go to state 14
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    S            go to state 18
    PACKAGES     go to state 19
    IMPORTS      go to state 20
    HEADERS      go to state 21
    LIB_C        go to state 22
    LIB_J        go to state 23
    DTYPE        go to state 24
    CLASSHEADER  go to state 25
    MODIFIERS    go to state 26
    MODIFIER     go to state 27
    FUNC_C       go to state 28
    MAIN_C       go to state 29


state 1

   79 FUNC_C: error . ID '(' PARAM_C ')' '{' COND_C '}' FUNC_C
   81       | error . ID '(' error ')' '{' COND_C '}' FUNC_C

    ID  shift, and go to state 30


state 2

    9 PACKAGES: PACKAGE . CLASS_HIERARCHY ';'

    ID  shift, and go to state 31

    CLASS_HIERARCHY  go to state 32


state 3

   59 CLASSHEADER: CLASS . ID EXTEND INTERFACES '{' FUNC_J '}'
   61            | CLASS . ID EXTEND '{' FUNC_J '}'
   62            | CLASS . ID INTERFACES '{' FUNC_J '}'
   63            | CLASS . ID '{' FUNC_J '}'

    ID  shift, and go to state 33


state 4

   14 LIB_C: HEADERC . '<' ID '.' ID '>'

    '<'  shift, and go to state 34


state 5

   15 LIB_J: HEADERJ . CLASS_HIERARCHY ';'
   16      | HEADERJ . CLASS_HIERARCHY '.' '*' ';'
   17      | HEADERJ . CLASS_HIERARCHY error
   18      | HEADERJ . error ';'

    error  shift, and go to state 35
    ID     shift, and go to state 31

    CLASS_HIERARCHY  go to state 36


state 6

   23 DTYPE: LONG .

    $default  reduce using rule 23 (DTYPE)


state 7

   21 DTYPE: DOUBLE .

    $default  reduce using rule 21 (DTYPE)


state 8

   19 DTYPE: INT .
   95 MAIN_C: INT . MAIN '(' INT ID ',' CHAR '*' ID '[' ']' ')' '{' COND_C '}'
   96       | INT . MAIN '(' ')' '{' COND_C '}'

    MAIN  shift, and go to state 37

    $default  reduce using rule 19 (DTYPE)


state 9

   20 DTYPE: FLOAT .

    $default  reduce using rule 20 (DTYPE)


state 10

   22 DTYPE: CHAR .

    $default  reduce using rule 22 (DTYPE)


state 11

   24 DTYPE: SHORT .

    $default  reduce using rule 24 (DTYPE)


state 12

   26 DTYPE: VOID .

    $default  reduce using rule 26 (DTYPE)


state 13

   25 DTYPE: BOOLEAN .

    $default  reduce using rule 25 (DTYPE)


state 14

   69 MODIFIER: PUBLIC .

    $default  reduce using rule 69 (MODIFIER)


state 15

   71 MODIFIER: PRIVATE .

    $default  reduce using rule 71 (MODIFIER)


state 16

   70 MODIFIER: PROTECTED .

    $default  reduce using rule 70 (MODIFIER)


state 17

   72 MODIFIER: STATIC .

    $default  reduce using rule 72 (MODIFIER)


state 18

    0 $accept: S . $end

    $end  shift, and go to state 38


state 19

    3 S: PACKAGES . IMPORTS CLASSHEADER
    4  | PACKAGES . CLASSHEADER

    CLASS      shift, and go to state 3
    HEADERJ    shift, and go to state 5
    PUBLIC     shift, and go to state 14
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    IMPORTS      go to state 39
    LIB_J        go to state 23
    CLASSHEADER  go to state 40
    MODIFIERS    go to state 26
    MODIFIER     go to state 27


state 20

    5 S: IMPORTS . CLASSHEADER

    CLASS      shift, and go to state 3
    PUBLIC     shift, and go to state 14
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    CLASSHEADER  go to state 41
    MODIFIERS    go to state 26
    MODIFIER     go to state 27


state 21

    1 S: HEADERS . FUNC_C

    error    shift, and go to state 1
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    DTYPE   go to state 24
    FUNC_C  go to state 42
    MAIN_C  go to state 29


state 22

   12 HEADERS: LIB_C .
   13        | LIB_C . LIB_C

    HEADERC  shift, and go to state 4

    $default  reduce using rule 12 (HEADERS)

    LIB_C  go to state 43


state 23

   10 IMPORTS: LIB_J .
   11        | LIB_J . LIB_J

    HEADERJ  shift, and go to state 5

    $default  reduce using rule 10 (IMPORTS)

    LIB_J  go to state 44


state 24

   75 FUNC_C: DTYPE . ID '(' PARAM_C ')' '{' COND_C '}' FUNC_C
   77       | DTYPE . ID '(' error ')' '{' COND_C '}' FUNC_C
   78       | DTYPE . error '(' PARAM_C ')' '{' COND_C '}' FUNC_C
   80       | DTYPE . error '(' error ')' '{' COND_C '}' FUNC_C

    error  shift, and go to state 45
    ID     shift, and go to state 46


state 25

    6 S: CLASSHEADER .

    $default  reduce using rule 6 (S)


state 26

   56 CLASSHEADER: MODIFIERS . CLASS ID EXTEND INTERFACES '{' FUNC_J '}'
   57            | MODIFIERS . CLASS ID EXTEND '{' FUNC_J '}'
   58            | MODIFIERS . CLASS ID INTERFACES '{' FUNC_J '}'
   60            | MODIFIERS . CLASS ID '{' FUNC_J '}'
   65 MODIFIERS: MODIFIERS . MODIFIER

    CLASS      shift, and go to state 47
    PUBLIC     shift, and go to state 14
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    MODIFIER  go to state 48


state 27

   64 MODIFIERS: MODIFIER .

    $default  reduce using rule 64 (MODIFIERS)


state 28

    2 S: FUNC_C .

    $default  reduce using rule 2 (S)


state 29

   76 FUNC_C: MAIN_C .

    $default  reduce using rule 76 (FUNC_C)


state 30

   79 FUNC_C: error ID . '(' PARAM_C ')' '{' COND_C '}' FUNC_C
   81       | error ID . '(' error ')' '{' COND_C '}' FUNC_C

    '('  shift, and go to state 49


state 31

    8 CLASS_HIERARCHY: ID .

    $default  reduce using rule 8 (CLASS_HIERARCHY)


state 32

    7 CLASS_HIERARCHY: CLASS_HIERARCHY . '.' ID
    9 PACKAGES: PACKAGE CLASS_HIERARCHY . ';'

    '.'  shift, and go to state 50
    ';'  shift, and go to state 51


state 33

   59 CLASSHEADER: CLASS ID . EXTEND INTERFACES '{' FUNC_J '}'
   61            | CLASS ID . EXTEND '{' FUNC_J '}'
   62            | CLASS ID . INTERFACES '{' FUNC_J '}'
   63            | CLASS ID . '{' FUNC_J '}'

    EXTENDS     shift, and go to state 52
    IMPLEMENTS  shift, and go to state 53
    '{'         shift, and go to state 54

    EXTEND      go to state 55
    INTERFACES  go to state 56


state 34

   14 LIB_C: HEADERC '<' . ID '.' ID '>'

    ID  shift, and go to state 57


state 35

   18 LIB_J: HEADERJ error . ';'

    ';'  shift, and go to state 58


state 36

    7 CLASS_HIERARCHY: CLASS_HIERARCHY . '.' ID
   15 LIB_J: HEADERJ CLASS_HIERARCHY . ';'
   16      | HEADERJ CLASS_HIERARCHY . '.' '*' ';'
   17      | HEADERJ CLASS_HIERARCHY . error

    error  shift, and go to state 59
    '.'    shift, and go to state 60
    ';'    shift, and go to state 61


state 37

   95 MAIN_C: INT MAIN . '(' INT ID ',' CHAR '*' ID '[' ']' ')' '{' COND_C '}'
   96       | INT MAIN . '(' ')' '{' COND_C '}'

    '('  shift, and go to state 62


state 38

    0 $accept: S $end .

    $default  accept


state 39

    3 S: PACKAGES IMPORTS . CLASSHEADER

    CLASS      shift, and go to state 3
    PUBLIC     shift, and go to state 14
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    CLASSHEADER  go to state 63
    MODIFIERS    go to state 26
    MODIFIER     go to state 27


state 40

    4 S: PACKAGES CLASSHEADER .

    $default  reduce using rule 4 (S)


state 41

    5 S: IMPORTS CLASSHEADER .

    $default  reduce using rule 5 (S)


state 42

    1 S: HEADERS FUNC_C .

    $default  reduce using rule 1 (S)


state 43

   13 HEADERS: LIB_C LIB_C .

    $default  reduce using rule 13 (HEADERS)


state 44

   11 IMPORTS: LIB_J LIB_J .

    $default  reduce using rule 11 (IMPORTS)


state 45

   78 FUNC_C: DTYPE error . '(' PARAM_C ')' '{' COND_C '}' FUNC_C
   80       | DTYPE error . '(' error ')' '{' COND_C '}' FUNC_C

    '('  shift, and go to state 64


state 46

   75 FUNC_C: DTYPE ID . '(' PARAM_C ')' '{' COND_C '}' FUNC_C
   77       | DTYPE ID . '(' error ')' '{' COND_C '}' FUNC_C

    '('  shift, and go to state 65


state 47

   56 CLASSHEADER: MODIFIERS CLASS . ID EXTEND INTERFACES '{' FUNC_J '}'
   57            | MODIFIERS CLASS . ID EXTEND '{' FUNC_J '}'
   58            | MODIFIERS CLASS . ID INTERFACES '{' FUNC_J '}'
   60            | MODIFIERS CLASS . ID '{' FUNC_J '}'

    ID  shift, and go to state 66


state 48

   65 MODIFIERS: MODIFIERS MODIFIER .

    $default  reduce using rule 65 (MODIFIERS)


state 49

   79 FUNC_C: error ID '(' . PARAM_C ')' '{' COND_C '}' FUNC_C
   81       | error ID '(' . error ')' '{' COND_C '}' FUNC_C

    error    shift, and go to state 67
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    ')'  reduce using rule 44 (PARAM_C)

    DTYPE    go to state 69
    PARAM_C  go to state 70


state 50

    7 CLASS_HIERARCHY: CLASS_HIERARCHY '.' . ID

    ID  shift, and go to state 71


state 51

    9 PACKAGES: PACKAGE CLASS_HIERARCHY ';' .

    $default  reduce using rule 9 (PACKAGES)


state 52

   73 EXTEND: EXTENDS . CLASSNAME

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    ID       shift, and go to state 31

    CLASS_HIERARCHY  go to state 72
    DTYPE            go to state 73
    CLASSNAME        go to state 74


state 53

   74 INTERFACES: IMPLEMENTS . CNAMELIST

    ID  shift, and go to state 31

    CLASS_HIERARCHY  go to state 75
    CNAMELIST        go to state 76


state 54

   63 CLASSHEADER: CLASS ID '{' . FUNC_J '}'

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 81
    MAIN_J     go to state 82


state 55

   59 CLASSHEADER: CLASS ID EXTEND . INTERFACES '{' FUNC_J '}'
   61            | CLASS ID EXTEND . '{' FUNC_J '}'

    IMPLEMENTS  shift, and go to state 53
    '{'         shift, and go to state 83

    INTERFACES  go to state 84


state 56

   62 CLASSHEADER: CLASS ID INTERFACES . '{' FUNC_J '}'

    '{'  shift, and go to state 85


state 57

   14 LIB_C: HEADERC '<' ID . '.' ID '>'

    '.'  shift, and go to state 86


state 58

   18 LIB_J: HEADERJ error ';' .

    $default  reduce using rule 18 (LIB_J)


state 59

   17 LIB_J: HEADERJ CLASS_HIERARCHY error .

    $default  reduce using rule 17 (LIB_J)


state 60

    7 CLASS_HIERARCHY: CLASS_HIERARCHY '.' . ID
   16 LIB_J: HEADERJ CLASS_HIERARCHY '.' . '*' ';'

    ID   shift, and go to state 71
    '*'  shift, and go to state 87


state 61

   15 LIB_J: HEADERJ CLASS_HIERARCHY ';' .

    $default  reduce using rule 15 (LIB_J)


state 62

   95 MAIN_C: INT MAIN '(' . INT ID ',' CHAR '*' ID '[' ']' ')' '{' COND_C '}'
   96       | INT MAIN '(' . ')' '{' COND_C '}'

    INT  shift, and go to state 88
    ')'  shift, and go to state 89


state 63

    3 S: PACKAGES IMPORTS CLASSHEADER .

    $default  reduce using rule 3 (S)


state 64

   78 FUNC_C: DTYPE error '(' . PARAM_C ')' '{' COND_C '}' FUNC_C
   80       | DTYPE error '(' . error ')' '{' COND_C '}' FUNC_C

    error    shift, and go to state 90
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    ')'  reduce using rule 44 (PARAM_C)

    DTYPE    go to state 69
    PARAM_C  go to state 91


state 65

   75 FUNC_C: DTYPE ID '(' . PARAM_C ')' '{' COND_C '}' FUNC_C
   77       | DTYPE ID '(' . error ')' '{' COND_C '}' FUNC_C

    error    shift, and go to state 92
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    ')'  reduce using rule 44 (PARAM_C)

    DTYPE    go to state 69
    PARAM_C  go to state 93


state 66

   56 CLASSHEADER: MODIFIERS CLASS ID . EXTEND INTERFACES '{' FUNC_J '}'
   57            | MODIFIERS CLASS ID . EXTEND '{' FUNC_J '}'
   58            | MODIFIERS CLASS ID . INTERFACES '{' FUNC_J '}'
   60            | MODIFIERS CLASS ID . '{' FUNC_J '}'

    EXTENDS     shift, and go to state 52
    IMPLEMENTS  shift, and go to state 53
    '{'         shift, and go to state 94

    EXTEND      go to state 95
    INTERFACES  go to state 96


state 67

   81 FUNC_C: error ID '(' error . ')' '{' COND_C '}' FUNC_C

    ')'  shift, and go to state 97


state 68

   19 DTYPE: INT .

    $default  reduce using rule 19 (DTYPE)


state 69

   37 PARAM_C: DTYPE . ID ',' PARAM_C
   38        | DTYPE . ID
   39        | DTYPE . ID '[' NUM ']' ',' PARAM_C
   40        | DTYPE . ID '[' ']' ',' PARAM_C
   41        | DTYPE . ID '[' ']'
   42        | DTYPE . '*' ID ',' PARAM_C
   43        | DTYPE . '*' ID

    ID   shift, and go to state 98
    '*'  shift, and go to state 99


state 70

   79 FUNC_C: error ID '(' PARAM_C . ')' '{' COND_C '}' FUNC_C

    ')'  shift, and go to state 100


state 71

    7 CLASS_HIERARCHY: CLASS_HIERARCHY '.' ID .

    $default  reduce using rule 7 (CLASS_HIERARCHY)


state 72

    7 CLASS_HIERARCHY: CLASS_HIERARCHY . '.' ID
   28 CLASSNAME: CLASS_HIERARCHY .

    '.'  shift, and go to state 50

    $default  reduce using rule 28 (CLASSNAME)


state 73

   27 CLASSNAME: DTYPE .

    $default  reduce using rule 27 (CLASSNAME)


state 74

   73 EXTEND: EXTENDS CLASSNAME .

    $default  reduce using rule 73 (EXTEND)


state 75

    7 CLASS_HIERARCHY: CLASS_HIERARCHY . '.' ID
   29 CNAMELIST: CLASS_HIERARCHY .

    '.'  shift, and go to state 50

    $default  reduce using rule 29 (CNAMELIST)


state 76

   30 CNAMELIST: CNAMELIST . ',' CLASS_HIERARCHY
   74 INTERFACES: IMPLEMENTS CNAMELIST .

    ','  shift, and go to state 101

    $default  reduce using rule 74 (INTERFACES)


state 77

   88 FUNC_J: error . ID '(' error ')' '{' COND_J '}' FUNC_J

    ID  shift, and go to state 102


state 78

   69 MODIFIER: PUBLIC .
   90 MAIN_J: PUBLIC . STATIC VOID MAIN '(' STRING ID '[' ']' ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC . STATIC VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}'
   92       | PUBLIC . error VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}'
   93       | PUBLIC . STATIC VOID error '(' STRING ID '[' ']' ')' '{' COND_J '}'
   94       | PUBLIC . STATIC VOID MAIN '(' error ')' '{' COND_J '}'

    error   shift, and go to state 103
    STATIC  shift, and go to state 104

    error      [reduce using rule 69 (MODIFIER)]
    LONG       reduce using rule 69 (MODIFIER)
    DOUBLE     reduce using rule 69 (MODIFIER)
    INT        reduce using rule 69 (MODIFIER)
    FLOAT      reduce using rule 69 (MODIFIER)
    CHAR       reduce using rule 69 (MODIFIER)
    SHORT      reduce using rule 69 (MODIFIER)
    VOID       reduce using rule 69 (MODIFIER)
    BOOLEAN    reduce using rule 69 (MODIFIER)
    PUBLIC     reduce using rule 69 (MODIFIER)
    PRIVATE    reduce using rule 69 (MODIFIER)
    PROTECTED  reduce using rule 69 (MODIFIER)
    STATIC     [reduce using rule 69 (MODIFIER)]


state 79

   67 MODIFIER1: MODIFIER1 . MODIFIER
   82 FUNC_J: MODIFIER1 . DTYPE ID '(' PARAM ')' '{' COND_J '}' FUNC_J
   84       | MODIFIER1 . DTYPE ID '(' error ')' '{' COND_J '}' FUNC_J
   85       | MODIFIER1 . DTYPE error '(' PARAM ')' '{' COND_J '}' FUNC_J
   86       | MODIFIER1 . error ID '(' PARAM ')' '{' COND_J '}' FUNC_J
   87       | MODIFIER1 . DTYPE error '(' error ')' '{' COND_J '}' FUNC_J

    error      shift, and go to state 105
    LONG       shift, and go to state 6
    DOUBLE     shift, and go to state 7
    INT        shift, and go to state 68
    FLOAT      shift, and go to state 9
    CHAR       shift, and go to state 10
    SHORT      shift, and go to state 11
    VOID       shift, and go to state 12
    BOOLEAN    shift, and go to state 13
    PUBLIC     shift, and go to state 14
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    DTYPE     go to state 106
    MODIFIER  go to state 107


state 80

   66 MODIFIER1: MODIFIER .

    $default  reduce using rule 66 (MODIFIER1)


state 81

   63 CLASSHEADER: CLASS ID '{' FUNC_J . '}'

    '}'  shift, and go to state 108


state 82

   83 FUNC_J: MAIN_J .

    $default  reduce using rule 83 (FUNC_J)


state 83

   61 CLASSHEADER: CLASS ID EXTEND '{' . FUNC_J '}'

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 109
    MAIN_J     go to state 82


state 84

   59 CLASSHEADER: CLASS ID EXTEND INTERFACES . '{' FUNC_J '}'

    '{'  shift, and go to state 110


state 85

   62 CLASSHEADER: CLASS ID INTERFACES '{' . FUNC_J '}'

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 111
    MAIN_J     go to state 82


state 86

   14 LIB_C: HEADERC '<' ID '.' . ID '>'

    ID  shift, and go to state 112


state 87

   16 LIB_J: HEADERJ CLASS_HIERARCHY '.' '*' . ';'

    ';'  shift, and go to state 113


state 88

   95 MAIN_C: INT MAIN '(' INT . ID ',' CHAR '*' ID '[' ']' ')' '{' COND_C '}'

    ID  shift, and go to state 114


state 89

   96 MAIN_C: INT MAIN '(' ')' . '{' COND_C '}'

    '{'  shift, and go to state 115


state 90

   80 FUNC_C: DTYPE error '(' error . ')' '{' COND_C '}' FUNC_C

    ')'  shift, and go to state 116


state 91

   78 FUNC_C: DTYPE error '(' PARAM_C . ')' '{' COND_C '}' FUNC_C

    ')'  shift, and go to state 117


state 92

   77 FUNC_C: DTYPE ID '(' error . ')' '{' COND_C '}' FUNC_C

    ')'  shift, and go to state 118


state 93

   75 FUNC_C: DTYPE ID '(' PARAM_C . ')' '{' COND_C '}' FUNC_C

    ')'  shift, and go to state 119


state 94

   60 CLASSHEADER: MODIFIERS CLASS ID '{' . FUNC_J '}'

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 120
    MAIN_J     go to state 82


state 95

   56 CLASSHEADER: MODIFIERS CLASS ID EXTEND . INTERFACES '{' FUNC_J '}'
   57            | MODIFIERS CLASS ID EXTEND . '{' FUNC_J '}'

    IMPLEMENTS  shift, and go to state 53
    '{'         shift, and go to state 121

    INTERFACES  go to state 122


state 96

   58 CLASSHEADER: MODIFIERS CLASS ID INTERFACES . '{' FUNC_J '}'

    '{'  shift, and go to state 123


state 97

   81 FUNC_C: error ID '(' error ')' . '{' COND_C '}' FUNC_C

    '{'  shift, and go to state 124


state 98

   37 PARAM_C: DTYPE ID . ',' PARAM_C
   38        | DTYPE ID .
   39        | DTYPE ID . '[' NUM ']' ',' PARAM_C
   40        | DTYPE ID . '[' ']' ',' PARAM_C
   41        | DTYPE ID . '[' ']'

    ','  shift, and go to state 125
    '['  shift, and go to state 126

    $default  reduce using rule 38 (PARAM_C)


state 99

   42 PARAM_C: DTYPE '*' . ID ',' PARAM_C
   43        | DTYPE '*' . ID

    ID  shift, and go to state 127


state 100

   79 FUNC_C: error ID '(' PARAM_C ')' . '{' COND_C '}' FUNC_C

    '{'  shift, and go to state 128


state 101

   30 CNAMELIST: CNAMELIST ',' . CLASS_HIERARCHY

    ID  shift, and go to state 31

    CLASS_HIERARCHY  go to state 129


state 102

   88 FUNC_J: error ID . '(' error ')' '{' COND_J '}' FUNC_J

    '('  shift, and go to state 130


state 103

   92 MAIN_J: PUBLIC error . VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}'

    VOID  shift, and go to state 131


state 104

   90 MAIN_J: PUBLIC STATIC . VOID MAIN '(' STRING ID '[' ']' ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC . VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}'
   93       | PUBLIC STATIC . VOID error '(' STRING ID '[' ']' ')' '{' COND_J '}'
   94       | PUBLIC STATIC . VOID MAIN '(' error ')' '{' COND_J '}'

    VOID  shift, and go to state 132


state 105

   86 FUNC_J: MODIFIER1 error . ID '(' PARAM ')' '{' COND_J '}' FUNC_J

    ID  shift, and go to state 133


state 106

   82 FUNC_J: MODIFIER1 DTYPE . ID '(' PARAM ')' '{' COND_J '}' FUNC_J
   84       | MODIFIER1 DTYPE . ID '(' error ')' '{' COND_J '}' FUNC_J
   85       | MODIFIER1 DTYPE . error '(' PARAM ')' '{' COND_J '}' FUNC_J
   87       | MODIFIER1 DTYPE . error '(' error ')' '{' COND_J '}' FUNC_J

    error  shift, and go to state 134
    ID     shift, and go to state 135


state 107

   67 MODIFIER1: MODIFIER1 MODIFIER .

    $default  reduce using rule 67 (MODIFIER1)


state 108

   63 CLASSHEADER: CLASS ID '{' FUNC_J '}' .

    $default  reduce using rule 63 (CLASSHEADER)


state 109

   61 CLASSHEADER: CLASS ID EXTEND '{' FUNC_J . '}'

    '}'  shift, and go to state 136


state 110

   59 CLASSHEADER: CLASS ID EXTEND INTERFACES '{' . FUNC_J '}'

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 137
    MAIN_J     go to state 82


state 111

   62 CLASSHEADER: CLASS ID INTERFACES '{' FUNC_J . '}'

    '}'  shift, and go to state 138


state 112

   14 LIB_C: HEADERC '<' ID '.' ID . '>'

    '>'  shift, and go to state 139


state 113

   16 LIB_J: HEADERJ CLASS_HIERARCHY '.' '*' ';' .

    $default  reduce using rule 16 (LIB_J)


state 114

   95 MAIN_C: INT MAIN '(' INT ID . ',' CHAR '*' ID '[' ']' ')' '{' COND_C '}'

    ','  shift, and go to state 140


state 115

   96 MAIN_C: INT MAIN '(' ')' '{' . COND_C '}'

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 151
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 116

   80 FUNC_C: DTYPE error '(' error ')' . '{' COND_C '}' FUNC_C

    '{'  shift, and go to state 156


state 117

   78 FUNC_C: DTYPE error '(' PARAM_C ')' . '{' COND_C '}' FUNC_C

    '{'  shift, and go to state 157


state 118

   77 FUNC_C: DTYPE ID '(' error ')' . '{' COND_C '}' FUNC_C

    '{'  shift, and go to state 158


state 119

   75 FUNC_C: DTYPE ID '(' PARAM_C ')' . '{' COND_C '}' FUNC_C

    '{'  shift, and go to state 159


state 120

   60 CLASSHEADER: MODIFIERS CLASS ID '{' FUNC_J . '}'

    '}'  shift, and go to state 160


state 121

   57 CLASSHEADER: MODIFIERS CLASS ID EXTEND '{' . FUNC_J '}'

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 161
    MAIN_J     go to state 82


state 122

   56 CLASSHEADER: MODIFIERS CLASS ID EXTEND INTERFACES . '{' FUNC_J '}'

    '{'  shift, and go to state 162


state 123

   58 CLASSHEADER: MODIFIERS CLASS ID INTERFACES '{' . FUNC_J '}'

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 163
    MAIN_J     go to state 82


state 124

   81 FUNC_C: error ID '(' error ')' '{' . COND_C '}' FUNC_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 164
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 125

   37 PARAM_C: DTYPE ID ',' . PARAM_C

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    $default  reduce using rule 44 (PARAM_C)

    DTYPE    go to state 69
    PARAM_C  go to state 165


state 126

   39 PARAM_C: DTYPE ID '[' . NUM ']' ',' PARAM_C
   40        | DTYPE ID '[' . ']' ',' PARAM_C
   41        | DTYPE ID '[' . ']'

    NUM  shift, and go to state 166
    ']'  shift, and go to state 167


state 127

   42 PARAM_C: DTYPE '*' ID . ',' PARAM_C
   43        | DTYPE '*' ID .

    ','  shift, and go to state 168

    $default  reduce using rule 43 (PARAM_C)


state 128

   79 FUNC_C: error ID '(' PARAM_C ')' '{' . COND_C '}' FUNC_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 169
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 129

    7 CLASS_HIERARCHY: CLASS_HIERARCHY . '.' ID
   30 CNAMELIST: CNAMELIST ',' CLASS_HIERARCHY .

    '.'  shift, and go to state 50

    $default  reduce using rule 30 (CNAMELIST)


state 130

   88 FUNC_J: error ID '(' . error ')' '{' COND_J '}' FUNC_J

    error  shift, and go to state 170


state 131

   92 MAIN_J: PUBLIC error VOID . MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}'

    MAIN  shift, and go to state 171


state 132

   90 MAIN_J: PUBLIC STATIC VOID . MAIN '(' STRING ID '[' ']' ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC VOID . MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}'
   93       | PUBLIC STATIC VOID . error '(' STRING ID '[' ']' ')' '{' COND_J '}'
   94       | PUBLIC STATIC VOID . MAIN '(' error ')' '{' COND_J '}'

    error  shift, and go to state 172
    MAIN   shift, and go to state 173


state 133

   86 FUNC_J: MODIFIER1 error ID . '(' PARAM ')' '{' COND_J '}' FUNC_J

    '('  shift, and go to state 174


state 134

   85 FUNC_J: MODIFIER1 DTYPE error . '(' PARAM ')' '{' COND_J '}' FUNC_J
   87       | MODIFIER1 DTYPE error . '(' error ')' '{' COND_J '}' FUNC_J

    '('  shift, and go to state 175


state 135

   82 FUNC_J: MODIFIER1 DTYPE ID . '(' PARAM ')' '{' COND_J '}' FUNC_J
   84       | MODIFIER1 DTYPE ID . '(' error ')' '{' COND_J '}' FUNC_J

    '('  shift, and go to state 176


state 136

   61 CLASSHEADER: CLASS ID EXTEND '{' FUNC_J '}' .

    $default  reduce using rule 61 (CLASSHEADER)


state 137

   59 CLASSHEADER: CLASS ID EXTEND INTERFACES '{' FUNC_J . '}'

    '}'  shift, and go to state 177


state 138

   62 CLASSHEADER: CLASS ID INTERFACES '{' FUNC_J '}' .

    $default  reduce using rule 62 (CLASSHEADER)


state 139

   14 LIB_C: HEADERC '<' ID '.' ID '>' .

    $default  reduce using rule 14 (LIB_C)


state 140

   95 MAIN_C: INT MAIN '(' INT ID ',' . CHAR '*' ID '[' ']' ')' '{' COND_C '}'

    CHAR  shift, and go to state 178


state 141

  129 COND_C: error . COND_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 179
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 142

  216 RET: RETURN . INIT3 ';'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    $default  reduce using rule 196 (INIT3)

    INIT2   go to state 181
    INIT3   go to state 182
    ID_NUM  go to state 154


state 143

  102 COND_C: FOR . '(' INIT1 EXP2 INIT3 ')' DEF_C
  103       | FOR . '(' error EXP2 INIT3 ')' DEF_C
  104       | FOR . '(' INIT1 error INIT3 ')' DEF_C
  105       | FOR . '(' INIT1 EXP2 error ')' DEF_C
  106       | FOR . '(' error error INIT3 ')' DEF_C
  107       | FOR . '(' error EXP2 error ')' DEF_C
  108       | FOR . '(' INIT1 error error ')' DEF_C
  109       | FOR . '(' error error error ')' DEF_C

    '('  shift, and go to state 183


state 144

  110 COND_C: WHILE . COND1 DEF_C
  111       | WHILE . COND2 DEF_C
  125       | WHILE . error DEF_C

    error  shift, and go to state 184
    '('    shift, and go to state 185

    COND1  go to state 186
    COND2  go to state 187


state 145

  112 COND_C: IF . COND1 DEF_C
  113       | IF . COND2 DEF_C

    '('  shift, and go to state 185

    COND1  go to state 188
    COND2  go to state 189


state 146

  116 COND_C: ID . '(' '"' '%' ID '"' ',' REA ')' ';' COND_C
  117       | ID . '(' '"' '%' ID '"' ',' REA ')' ';'
  118       | ID . '(' '"' '%' ID '"' ',' ARG ')' ';' COND_C
  119       | ID . '(' '"' '%' ID '"' ',' ARG ')' ';'
  120       | ID . '(' ARG ')' ';' COND_C
  121       | ID . '(' ARG ')' ';'
  122       | ID . '(' '"' ID '"' ')' ';' COND_C
  123       | ID . '(' '"' ID '"' ')' ';'
  178 INIT2: ID . '=' INIT2
  194      | ID . '(' ARG ')'
  213 ID_NUM: ID .

    '('  shift, and go to state 190
    '='  shift, and go to state 191

    '('       [reduce using rule 213 (ID_NUM)]
    $default  reduce using rule 213 (ID_NUM)


state 147

  214 ID_NUM: NUM .

    $default  reduce using rule 214 (ID_NUM)


state 148

   97 COND_C: DTYPE . ID ';' COND_C
   98       | DTYPE . '*' ID ';' COND_C
   99       | DTYPE . ID ';'
  100       | DTYPE . '*' ID ';'
  101       | DTYPE . ID '[' ID_NUM ']' ';' COND_C
  126       | DTYPE . error ';' COND_C
  127       | DTYPE . '*' error ';' COND_C
  128       | DTYPE . ID error COND_C

    error  shift, and go to state 192
    ID     shift, and go to state 193
    '*'    shift, and go to state 194


state 149

   47 VAR: EXP . ';' VAR
   48    | EXP . ';'

    ';'  shift, and go to state 195


state 150

  114 COND_C: VAR . COND_C
  115       | VAR .

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    error    [reduce using rule 115 (COND_C)]
    RETURN   [reduce using rule 115 (COND_C)]
    LONG     [reduce using rule 115 (COND_C)]
    DOUBLE   [reduce using rule 115 (COND_C)]
    INT      [reduce using rule 115 (COND_C)]
    FLOAT    [reduce using rule 115 (COND_C)]
    CHAR     [reduce using rule 115 (COND_C)]
    SHORT    [reduce using rule 115 (COND_C)]
    VOID     [reduce using rule 115 (COND_C)]
    BOOLEAN  [reduce using rule 115 (COND_C)]
    FOR      [reduce using rule 115 (COND_C)]
    WHILE    [reduce using rule 115 (COND_C)]
    IF       [reduce using rule 115 (COND_C)]
    ID       [reduce using rule 115 (COND_C)]
    NUM      [reduce using rule 115 (COND_C)]
    '('      reduce using rule 115 (COND_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 115 (COND_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 196
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 151

   96 MAIN_C: INT MAIN '(' ')' '{' COND_C . '}'

    '}'  shift, and go to state 197


state 152

   45 EXP: INIT2 .
  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  195 INIT3: INIT2 .

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    OR   shift, and go to state 202
    AND  shift, and go to state 203
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    '('       reduce using rule 195 (INIT3)
    $default  reduce using rule 45 (EXP)


state 153

   46 EXP: INIT3 . '(' INIT2 ')'

    '('  shift, and go to state 210


state 154

  193 INIT2: ID_NUM .

    $default  reduce using rule 193 (INIT2)


state 155

  124 COND_C: RET .

    $default  reduce using rule 124 (COND_C)


state 156

   80 FUNC_C: DTYPE error '(' error ')' '{' . COND_C '}' FUNC_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 211
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 157

   78 FUNC_C: DTYPE error '(' PARAM_C ')' '{' . COND_C '}' FUNC_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 212
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 158

   77 FUNC_C: DTYPE ID '(' error ')' '{' . COND_C '}' FUNC_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 213
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 159

   75 FUNC_C: DTYPE ID '(' PARAM_C ')' '{' . COND_C '}' FUNC_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 214
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 160

   60 CLASSHEADER: MODIFIERS CLASS ID '{' FUNC_J '}' .

    $default  reduce using rule 60 (CLASSHEADER)


state 161

   57 CLASSHEADER: MODIFIERS CLASS ID EXTEND '{' FUNC_J . '}'

    '}'  shift, and go to state 215


state 162

   56 CLASSHEADER: MODIFIERS CLASS ID EXTEND INTERFACES '{' . FUNC_J '}'

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 216
    MAIN_J     go to state 82


state 163

   58 CLASSHEADER: MODIFIERS CLASS ID INTERFACES '{' FUNC_J . '}'

    '}'  shift, and go to state 217


state 164

   81 FUNC_C: error ID '(' error ')' '{' COND_C . '}' FUNC_C

    '}'  shift, and go to state 218


state 165

   37 PARAM_C: DTYPE ID ',' PARAM_C .

    $default  reduce using rule 37 (PARAM_C)


state 166

   39 PARAM_C: DTYPE ID '[' NUM . ']' ',' PARAM_C

    ']'  shift, and go to state 219


state 167

   40 PARAM_C: DTYPE ID '[' ']' . ',' PARAM_C
   41        | DTYPE ID '[' ']' .

    ','  shift, and go to state 220

    $default  reduce using rule 41 (PARAM_C)


state 168

   42 PARAM_C: DTYPE '*' ID ',' . PARAM_C

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    $default  reduce using rule 44 (PARAM_C)

    DTYPE    go to state 69
    PARAM_C  go to state 221


state 169

   79 FUNC_C: error ID '(' PARAM_C ')' '{' COND_C . '}' FUNC_C

    '}'  shift, and go to state 222


state 170

   88 FUNC_J: error ID '(' error . ')' '{' COND_J '}' FUNC_J

    ')'  shift, and go to state 223


state 171

   92 MAIN_J: PUBLIC error VOID MAIN . '(' STRING ID '[' ']' ')' '{' COND_J '}'

    '('  shift, and go to state 224


state 172

   93 MAIN_J: PUBLIC STATIC VOID error . '(' STRING ID '[' ']' ')' '{' COND_J '}'

    '('  shift, and go to state 225


state 173

   90 MAIN_J: PUBLIC STATIC VOID MAIN . '(' STRING ID '[' ']' ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC VOID MAIN . '(' STRING ID '[' ']' ')' '{' COND_J '}'
   94       | PUBLIC STATIC VOID MAIN . '(' error ')' '{' COND_J '}'

    '('  shift, and go to state 226


state 174

   86 FUNC_J: MODIFIER1 error ID '(' . PARAM ')' '{' COND_J '}' FUNC_J

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    $default  reduce using rule 36 (PARAM)

    DTYPE  go to state 227
    PARAM  go to state 228


state 175

   85 FUNC_J: MODIFIER1 DTYPE error '(' . PARAM ')' '{' COND_J '}' FUNC_J
   87       | MODIFIER1 DTYPE error '(' . error ')' '{' COND_J '}' FUNC_J

    error    shift, and go to state 229
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    ')'  reduce using rule 36 (PARAM)

    DTYPE  go to state 227
    PARAM  go to state 230


state 176

   82 FUNC_J: MODIFIER1 DTYPE ID '(' . PARAM ')' '{' COND_J '}' FUNC_J
   84       | MODIFIER1 DTYPE ID '(' . error ')' '{' COND_J '}' FUNC_J

    error    shift, and go to state 231
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    ')'  reduce using rule 36 (PARAM)

    DTYPE  go to state 227
    PARAM  go to state 232


state 177

   59 CLASSHEADER: CLASS ID EXTEND INTERFACES '{' FUNC_J '}' .

    $default  reduce using rule 59 (CLASSHEADER)


state 178

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR . '*' ID '[' ']' ')' '{' COND_C '}'

    '*'  shift, and go to state 233


state 179

  129 COND_C: error COND_C .

    $default  reduce using rule 129 (COND_C)


state 180

  178 INIT2: ID . '=' INIT2
  194      | ID . '(' ARG ')'
  213 ID_NUM: ID .

    '('  shift, and go to state 234
    '='  shift, and go to state 191

    '('       [reduce using rule 213 (ID_NUM)]
    $default  reduce using rule 213 (ID_NUM)


state 181

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  195 INIT3: INIT2 .

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    OR   shift, and go to state 202
    AND  shift, and go to state 203
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 195 (INIT3)


state 182

  216 RET: RETURN INIT3 . ';'

    ';'  shift, and go to state 235


state 183

  102 COND_C: FOR '(' . INIT1 EXP2 INIT3 ')' DEF_C
  103       | FOR '(' . error EXP2 INIT3 ')' DEF_C
  104       | FOR '(' . INIT1 error INIT3 ')' DEF_C
  105       | FOR '(' . INIT1 EXP2 error ')' DEF_C
  106       | FOR '(' . error error INIT3 ')' DEF_C
  107       | FOR '(' . error EXP2 error ')' DEF_C
  108       | FOR '(' . INIT1 error error ')' DEF_C
  109       | FOR '(' . error error error ')' DEF_C

    error  shift, and go to state 236
    ID     shift, and go to state 237
    NUM    shift, and go to state 147

    INIT1   go to state 238
    ID_NUM  go to state 239


state 184

  125 COND_C: WHILE error . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 242
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 185

  205 COND1: '(' . INIT2 '<' INIT2 ')'
  206      | '(' . INIT2 '>' INIT2 ')'
  207      | '(' . INIT2 LE INIT2 ')'
  208      | '(' . INIT2 GE INIT2 ')'
  209      | '(' . INIT2 EQ INIT2 ')'
  210      | '(' . INIT2 NE INIT2 ')'
  211      | '(' . INIT2 OR INIT2 ')'
  212      | '(' . INIT2 AND INIT2 ')'
  215 COND2: '(' . ID_NUM ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 244
    ID_NUM  go to state 245


state 186

  110 COND_C: WHILE COND1 . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 246
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 187

  111 COND_C: WHILE COND2 . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 247
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 188

  112 COND_C: IF COND1 . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 248
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 189

  113 COND_C: IF COND2 . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 249
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 190

  116 COND_C: ID '(' . '"' '%' ID '"' ',' REA ')' ';' COND_C
  117       | ID '(' . '"' '%' ID '"' ',' REA ')' ';'
  118       | ID '(' . '"' '%' ID '"' ',' ARG ')' ';' COND_C
  119       | ID '(' . '"' '%' ID '"' ',' ARG ')' ';'
  120       | ID '(' . ARG ')' ';' COND_C
  121       | ID '(' . ARG ')' ';'
  122       | ID '(' . '"' ID '"' ')' ';' COND_C
  123       | ID '(' . '"' ID '"' ')' ';'
  194 INIT2: ID '(' . ARG ')'

    ID   shift, and go to state 250
    NUM  shift, and go to state 147
    '"'  shift, and go to state 251

    $default  reduce using rule 51 (ARG)

    ARG     go to state 252
    ID_NUM  go to state 253


state 191

  178 INIT2: ID '=' . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 254
    ID_NUM  go to state 154


state 192

  126 COND_C: DTYPE error . ';' COND_C

    ';'  shift, and go to state 255


state 193

   97 COND_C: DTYPE ID . ';' COND_C
   99       | DTYPE ID . ';'
  101       | DTYPE ID . '[' ID_NUM ']' ';' COND_C
  128       | DTYPE ID . error COND_C

    error  shift, and go to state 256
    ';'    shift, and go to state 257
    '['    shift, and go to state 258


state 194

   98 COND_C: DTYPE '*' . ID ';' COND_C
  100       | DTYPE '*' . ID ';'
  127       | DTYPE '*' . error ';' COND_C

    error  shift, and go to state 259
    ID     shift, and go to state 260


state 195

   47 VAR: EXP ';' . VAR
   48    | EXP ';' .

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    ID        [reduce using rule 48 (VAR)]
    NUM       [reduce using rule 48 (VAR)]
    '('       reduce using rule 48 (VAR)
    '('       [reduce using rule 196 (INIT3)]
    $default  reduce using rule 48 (VAR)

    EXP     go to state 149
    VAR     go to state 261
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154


state 196

  114 COND_C: VAR COND_C .

    $default  reduce using rule 114 (COND_C)


state 197

   96 MAIN_C: INT MAIN '(' ')' '{' COND_C '}' .

    $default  reduce using rule 96 (MAIN_C)


state 198

  185 INIT2: INIT2 LE . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 262
    ID_NUM  go to state 154


state 199

  186 INIT2: INIT2 GE . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 263
    ID_NUM  go to state 154


state 200

  187 INIT2: INIT2 EQ . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 264
    ID_NUM  go to state 154


state 201

  188 INIT2: INIT2 NE . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 265
    ID_NUM  go to state 154


state 202

  189 INIT2: INIT2 OR . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 266
    ID_NUM  go to state 154


state 203

  190 INIT2: INIT2 AND . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 267
    ID_NUM  go to state 154


state 204

  184 INIT2: INIT2 '>' . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 268
    ID_NUM  go to state 154


state 205

  183 INIT2: INIT2 '<' . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 269
    ID_NUM  go to state 154


state 206

  179 INIT2: INIT2 '+' . INIT2
  191      | INIT2 '+' . '+'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147
    '+'  shift, and go to state 270

    INIT2   go to state 271
    ID_NUM  go to state 154


state 207

  180 INIT2: INIT2 '-' . INIT2
  192      | INIT2 '-' . '-'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147
    '-'  shift, and go to state 272

    INIT2   go to state 273
    ID_NUM  go to state 154


state 208

  181 INIT2: INIT2 '*' . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 274
    ID_NUM  go to state 154


state 209

  182 INIT2: INIT2 '/' . INIT2

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 275
    ID_NUM  go to state 154


state 210

   46 EXP: INIT3 '(' . INIT2 ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 276
    ID_NUM  go to state 154


state 211

   80 FUNC_C: DTYPE error '(' error ')' '{' COND_C . '}' FUNC_C

    '}'  shift, and go to state 277


state 212

   78 FUNC_C: DTYPE error '(' PARAM_C ')' '{' COND_C . '}' FUNC_C

    '}'  shift, and go to state 278


state 213

   77 FUNC_C: DTYPE ID '(' error ')' '{' COND_C . '}' FUNC_C

    '}'  shift, and go to state 279


state 214

   75 FUNC_C: DTYPE ID '(' PARAM_C ')' '{' COND_C . '}' FUNC_C

    '}'  shift, and go to state 280


state 215

   57 CLASSHEADER: MODIFIERS CLASS ID EXTEND '{' FUNC_J '}' .

    $default  reduce using rule 57 (CLASSHEADER)


state 216

   56 CLASSHEADER: MODIFIERS CLASS ID EXTEND INTERFACES '{' FUNC_J . '}'

    '}'  shift, and go to state 281


state 217

   58 CLASSHEADER: MODIFIERS CLASS ID INTERFACES '{' FUNC_J '}' .

    $default  reduce using rule 58 (CLASSHEADER)


state 218

   81 FUNC_C: error ID '(' error ')' '{' COND_C '}' . FUNC_C

    error    shift, and go to state 1
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    DTYPE   go to state 24
    FUNC_C  go to state 282
    MAIN_C  go to state 29


state 219

   39 PARAM_C: DTYPE ID '[' NUM ']' . ',' PARAM_C

    ','  shift, and go to state 283


state 220

   40 PARAM_C: DTYPE ID '[' ']' ',' . PARAM_C

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    $default  reduce using rule 44 (PARAM_C)

    DTYPE    go to state 69
    PARAM_C  go to state 284


state 221

   42 PARAM_C: DTYPE '*' ID ',' PARAM_C .

    $default  reduce using rule 42 (PARAM_C)


state 222

   79 FUNC_C: error ID '(' PARAM_C ')' '{' COND_C '}' . FUNC_C

    error    shift, and go to state 1
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    DTYPE   go to state 24
    FUNC_C  go to state 285
    MAIN_C  go to state 29


state 223

   88 FUNC_J: error ID '(' error ')' . '{' COND_J '}' FUNC_J

    '{'  shift, and go to state 286


state 224

   92 MAIN_J: PUBLIC error VOID MAIN '(' . STRING ID '[' ']' ')' '{' COND_J '}'

    STRING  shift, and go to state 287


state 225

   93 MAIN_J: PUBLIC STATIC VOID error '(' . STRING ID '[' ']' ')' '{' COND_J '}'

    STRING  shift, and go to state 288


state 226

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' . STRING ID '[' ']' ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC VOID MAIN '(' . STRING ID '[' ']' ')' '{' COND_J '}'
   94       | PUBLIC STATIC VOID MAIN '(' . error ')' '{' COND_J '}'

    error   shift, and go to state 289
    STRING  shift, and go to state 290


state 227

   31 PARAM: DTYPE . ID ',' PARAM
   32      | DTYPE . ID
   33      | DTYPE . ID '[' NUM ']' ',' PARAM
   34      | DTYPE . ID '[' ']' ',' PARAM
   35      | DTYPE . ID '[' ']'

    ID  shift, and go to state 291


state 228

   86 FUNC_J: MODIFIER1 error ID '(' PARAM . ')' '{' COND_J '}' FUNC_J

    ')'  shift, and go to state 292


state 229

   87 FUNC_J: MODIFIER1 DTYPE error '(' error . ')' '{' COND_J '}' FUNC_J

    ')'  shift, and go to state 293


state 230

   85 FUNC_J: MODIFIER1 DTYPE error '(' PARAM . ')' '{' COND_J '}' FUNC_J

    ')'  shift, and go to state 294


state 231

   84 FUNC_J: MODIFIER1 DTYPE ID '(' error . ')' '{' COND_J '}' FUNC_J

    ')'  shift, and go to state 295


state 232

   82 FUNC_J: MODIFIER1 DTYPE ID '(' PARAM . ')' '{' COND_J '}' FUNC_J

    ')'  shift, and go to state 296


state 233

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR '*' . ID '[' ']' ')' '{' COND_C '}'

    ID  shift, and go to state 297


state 234

  194 INIT2: ID '(' . ARG ')'

    ID   shift, and go to state 250
    NUM  shift, and go to state 147

    $default  reduce using rule 51 (ARG)

    ARG     go to state 298
    ID_NUM  go to state 253


state 235

  216 RET: RETURN INIT3 ';' .

    $default  reduce using rule 216 (RET)


state 236

  103 COND_C: FOR '(' error . EXP2 INIT3 ')' DEF_C
  106       | FOR '(' error . error INIT3 ')' DEF_C
  107       | FOR '(' error . EXP2 error ')' DEF_C
  109       | FOR '(' error . error error ')' DEF_C

    error  shift, and go to state 299
    ID     shift, and go to state 180
    NUM    shift, and go to state 147

    INIT2   go to state 300
    EXP2    go to state 301
    ID_NUM  go to state 154


state 237

  164 INIT1: ID . '=' INIT1 ';'
  213 ID_NUM: ID .

    '='  shift, and go to state 302

    $default  reduce using rule 213 (ID_NUM)


state 238

  102 COND_C: FOR '(' INIT1 . EXP2 INIT3 ')' DEF_C
  104       | FOR '(' INIT1 . error INIT3 ')' DEF_C
  105       | FOR '(' INIT1 . EXP2 error ')' DEF_C
  108       | FOR '(' INIT1 . error error ')' DEF_C
  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    error  shift, and go to state 303
    LE     shift, and go to state 304
    GE     shift, and go to state 305
    EQ     shift, and go to state 306
    NE     shift, and go to state 307
    OR     shift, and go to state 308
    AND    shift, and go to state 309
    ID     shift, and go to state 180
    NUM    shift, and go to state 147
    '>'    shift, and go to state 310
    '<'    shift, and go to state 311
    '+'    shift, and go to state 312
    '-'    shift, and go to state 313
    '*'    shift, and go to state 314
    '/'    shift, and go to state 315

    INIT2   go to state 300
    EXP2    go to state 316
    ID_NUM  go to state 154


state 239

  177 INIT1: ID_NUM .

    $default  reduce using rule 177 (INIT1)


state 240

  151 DEF_C: '{' . BODY_C '}'

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    error    [reduce using rule 160 (BODY_C)]
    RETURN   [reduce using rule 160 (BODY_C)]
    LONG     [reduce using rule 160 (BODY_C)]
    DOUBLE   [reduce using rule 160 (BODY_C)]
    INT      [reduce using rule 160 (BODY_C)]
    FLOAT    [reduce using rule 160 (BODY_C)]
    CHAR     [reduce using rule 160 (BODY_C)]
    SHORT    [reduce using rule 160 (BODY_C)]
    VOID     [reduce using rule 160 (BODY_C)]
    BOOLEAN  [reduce using rule 160 (BODY_C)]
    FOR      [reduce using rule 160 (BODY_C)]
    WHILE    [reduce using rule 160 (BODY_C)]
    IF       [reduce using rule 160 (BODY_C)]
    ID       [reduce using rule 160 (BODY_C)]
    NUM      [reduce using rule 160 (BODY_C)]
    '('      reduce using rule 160 (BODY_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 160 (BODY_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 317
    BODY_C  go to state 318
    INIT2   go to state 319
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 241

  153 DEF_C: COND_C .

    $default  reduce using rule 153 (DEF_C)


state 242

  125 COND_C: WHILE error DEF_C .

    $default  reduce using rule 125 (COND_C)


state 243

   45 EXP: INIT2 .
  152 DEF_C: INIT2 . ';'
  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  195 INIT3: INIT2 .

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    OR   shift, and go to state 202
    AND  shift, and go to state 203
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 320

    ';'       [reduce using rule 45 (EXP)]
    $default  reduce using rule 195 (INIT3)


state 244

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  205 COND1: '(' INIT2 . '<' INIT2 ')'
  206      | '(' INIT2 . '>' INIT2 ')'
  207      | '(' INIT2 . LE INIT2 ')'
  208      | '(' INIT2 . GE INIT2 ')'
  209      | '(' INIT2 . EQ INIT2 ')'
  210      | '(' INIT2 . NE INIT2 ')'
  211      | '(' INIT2 . OR INIT2 ')'
  212      | '(' INIT2 . AND INIT2 ')'

    LE   shift, and go to state 321
    GE   shift, and go to state 322
    EQ   shift, and go to state 323
    NE   shift, and go to state 324
    OR   shift, and go to state 325
    AND  shift, and go to state 326
    '>'  shift, and go to state 327
    '<'  shift, and go to state 328
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209


state 245

  193 INIT2: ID_NUM .
  215 COND2: '(' ID_NUM . ')'

    ')'  shift, and go to state 329

    $default  reduce using rule 193 (INIT2)


state 246

  110 COND_C: WHILE COND1 DEF_C .

    $default  reduce using rule 110 (COND_C)


state 247

  111 COND_C: WHILE COND2 DEF_C .

    $default  reduce using rule 111 (COND_C)


state 248

  112 COND_C: IF COND1 DEF_C .

    $default  reduce using rule 112 (COND_C)


state 249

  113 COND_C: IF COND2 DEF_C .

    $default  reduce using rule 113 (COND_C)


state 250

  213 ID_NUM: ID .

    $default  reduce using rule 213 (ID_NUM)


state 251

  116 COND_C: ID '(' '"' . '%' ID '"' ',' REA ')' ';' COND_C
  117       | ID '(' '"' . '%' ID '"' ',' REA ')' ';'
  118       | ID '(' '"' . '%' ID '"' ',' ARG ')' ';' COND_C
  119       | ID '(' '"' . '%' ID '"' ',' ARG ')' ';'
  122       | ID '(' '"' . ID '"' ')' ';' COND_C
  123       | ID '(' '"' . ID '"' ')' ';'

    ID   shift, and go to state 330
    '%'  shift, and go to state 331


state 252

  120 COND_C: ID '(' ARG . ')' ';' COND_C
  121       | ID '(' ARG . ')' ';'
  194 INIT2: ID '(' ARG . ')'

    ')'  shift, and go to state 332


state 253

   49 ARG: ID_NUM . ',' ARG
   50    | ID_NUM .

    ','  shift, and go to state 333

    $default  reduce using rule 50 (ARG)


state 254

  178 INIT2: ID '=' INIT2 .
  179      | INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    OR   shift, and go to state 202
    AND  shift, and go to state 203
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    LE        [reduce using rule 178 (INIT2)]
    GE        [reduce using rule 178 (INIT2)]
    EQ        [reduce using rule 178 (INIT2)]
    NE        [reduce using rule 178 (INIT2)]
    OR        [reduce using rule 178 (INIT2)]
    AND       [reduce using rule 178 (INIT2)]
    '>'       [reduce using rule 178 (INIT2)]
    '<'       [reduce using rule 178 (INIT2)]
    '+'       [reduce using rule 178 (INIT2)]
    '-'       [reduce using rule 178 (INIT2)]
    '*'       [reduce using rule 178 (INIT2)]
    '/'       [reduce using rule 178 (INIT2)]
    $default  reduce using rule 178 (INIT2)


state 255

  126 COND_C: DTYPE error ';' . COND_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 334
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 256

  128 COND_C: DTYPE ID error . COND_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 335
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 257

   97 COND_C: DTYPE ID ';' . COND_C
   99       | DTYPE ID ';' .

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    error    [reduce using rule 99 (COND_C)]
    RETURN   [reduce using rule 99 (COND_C)]
    LONG     [reduce using rule 99 (COND_C)]
    DOUBLE   [reduce using rule 99 (COND_C)]
    INT      [reduce using rule 99 (COND_C)]
    FLOAT    [reduce using rule 99 (COND_C)]
    CHAR     [reduce using rule 99 (COND_C)]
    SHORT    [reduce using rule 99 (COND_C)]
    VOID     [reduce using rule 99 (COND_C)]
    BOOLEAN  [reduce using rule 99 (COND_C)]
    FOR      [reduce using rule 99 (COND_C)]
    WHILE    [reduce using rule 99 (COND_C)]
    IF       [reduce using rule 99 (COND_C)]
    ID       [reduce using rule 99 (COND_C)]
    NUM      [reduce using rule 99 (COND_C)]
    '('      reduce using rule 99 (COND_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 99 (COND_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 336
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 258

  101 COND_C: DTYPE ID '[' . ID_NUM ']' ';' COND_C

    ID   shift, and go to state 250
    NUM  shift, and go to state 147

    ID_NUM  go to state 337


state 259

  127 COND_C: DTYPE '*' error . ';' COND_C

    ';'  shift, and go to state 338


state 260

   98 COND_C: DTYPE '*' ID . ';' COND_C
  100       | DTYPE '*' ID . ';'

    ';'  shift, and go to state 339


state 261

   47 VAR: EXP ';' VAR .

    $default  reduce using rule 47 (VAR)


state 262

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  185      | INIT2 LE INIT2 .
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 185 (INIT2)


state 263

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  186      | INIT2 GE INIT2 .
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 186 (INIT2)


state 264

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  187      | INIT2 EQ INIT2 .
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 187 (INIT2)


state 265

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  188      | INIT2 NE INIT2 .
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 188 (INIT2)


state 266

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  189      | INIT2 OR INIT2 .
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 189 (INIT2)


state 267

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  190      | INIT2 AND INIT2 .
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 190 (INIT2)


state 268

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  184      | INIT2 '>' INIT2 .
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 184 (INIT2)


state 269

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  183      | INIT2 '<' INIT2 .
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 183 (INIT2)


state 270

  191 INIT2: INIT2 '+' '+' .

    $default  reduce using rule 191 (INIT2)


state 271

  179 INIT2: INIT2 . '+' INIT2
  179      | INIT2 '+' INIT2 .
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 179 (INIT2)


state 272

  192 INIT2: INIT2 '-' '-' .

    $default  reduce using rule 192 (INIT2)


state 273

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  180      | INIT2 '-' INIT2 .
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    '*'  shift, and go to state 208
    '/'  shift, and go to state 209

    $default  reduce using rule 180 (INIT2)


state 274

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  181      | INIT2 '*' INIT2 .
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    $default  reduce using rule 181 (INIT2)


state 275

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  182      | INIT2 '/' INIT2 .
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    $default  reduce using rule 182 (INIT2)


state 276

   46 EXP: INIT3 '(' INIT2 . ')'
  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    OR   shift, and go to state 202
    AND  shift, and go to state 203
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ')'  shift, and go to state 340


state 277

   80 FUNC_C: DTYPE error '(' error ')' '{' COND_C '}' . FUNC_C

    error    shift, and go to state 1
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    DTYPE   go to state 24
    FUNC_C  go to state 341
    MAIN_C  go to state 29


state 278

   78 FUNC_C: DTYPE error '(' PARAM_C ')' '{' COND_C '}' . FUNC_C

    error    shift, and go to state 1
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    DTYPE   go to state 24
    FUNC_C  go to state 342
    MAIN_C  go to state 29


state 279

   77 FUNC_C: DTYPE ID '(' error ')' '{' COND_C '}' . FUNC_C

    error    shift, and go to state 1
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    DTYPE   go to state 24
    FUNC_C  go to state 343
    MAIN_C  go to state 29


state 280

   75 FUNC_C: DTYPE ID '(' PARAM_C ')' '{' COND_C '}' . FUNC_C

    error    shift, and go to state 1
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 8
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    DTYPE   go to state 24
    FUNC_C  go to state 344
    MAIN_C  go to state 29


state 281

   56 CLASSHEADER: MODIFIERS CLASS ID EXTEND INTERFACES '{' FUNC_J '}' .

    $default  reduce using rule 56 (CLASSHEADER)


state 282

   81 FUNC_C: error ID '(' error ')' '{' COND_C '}' FUNC_C .

    $default  reduce using rule 81 (FUNC_C)


state 283

   39 PARAM_C: DTYPE ID '[' NUM ']' ',' . PARAM_C

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    $default  reduce using rule 44 (PARAM_C)

    DTYPE    go to state 69
    PARAM_C  go to state 345


state 284

   40 PARAM_C: DTYPE ID '[' ']' ',' PARAM_C .

    $default  reduce using rule 40 (PARAM_C)


state 285

   79 FUNC_C: error ID '(' PARAM_C ')' '{' COND_C '}' FUNC_C .

    $default  reduce using rule 79 (FUNC_C)


state 286

   88 FUNC_J: error ID '(' error ')' '{' . COND_J '}' FUNC_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 353
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 287

   92 MAIN_J: PUBLIC error VOID MAIN '(' STRING . ID '[' ']' ')' '{' COND_J '}'

    ID  shift, and go to state 356


state 288

   93 MAIN_J: PUBLIC STATIC VOID error '(' STRING . ID '[' ']' ')' '{' COND_J '}'

    ID  shift, and go to state 357


state 289

   94 MAIN_J: PUBLIC STATIC VOID MAIN '(' error . ')' '{' COND_J '}'

    ')'  shift, and go to state 358


state 290

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING . ID '[' ']' ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC VOID MAIN '(' STRING . ID '[' ']' ')' '{' COND_J '}'

    ID  shift, and go to state 359


state 291

   31 PARAM: DTYPE ID . ',' PARAM
   32      | DTYPE ID .
   33      | DTYPE ID . '[' NUM ']' ',' PARAM
   34      | DTYPE ID . '[' ']' ',' PARAM
   35      | DTYPE ID . '[' ']'

    ','  shift, and go to state 360
    '['  shift, and go to state 361

    $default  reduce using rule 32 (PARAM)


state 292

   86 FUNC_J: MODIFIER1 error ID '(' PARAM ')' . '{' COND_J '}' FUNC_J

    '{'  shift, and go to state 362


state 293

   87 FUNC_J: MODIFIER1 DTYPE error '(' error ')' . '{' COND_J '}' FUNC_J

    '{'  shift, and go to state 363


state 294

   85 FUNC_J: MODIFIER1 DTYPE error '(' PARAM ')' . '{' COND_J '}' FUNC_J

    '{'  shift, and go to state 364


state 295

   84 FUNC_J: MODIFIER1 DTYPE ID '(' error ')' . '{' COND_J '}' FUNC_J

    '{'  shift, and go to state 365


state 296

   82 FUNC_J: MODIFIER1 DTYPE ID '(' PARAM ')' . '{' COND_J '}' FUNC_J

    '{'  shift, and go to state 366


state 297

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR '*' ID . '[' ']' ')' '{' COND_C '}'

    '['  shift, and go to state 367


state 298

  194 INIT2: ID '(' ARG . ')'

    ')'  shift, and go to state 368


state 299

  106 COND_C: FOR '(' error error . INIT3 ')' DEF_C
  109       | FOR '(' error error . error ')' DEF_C

    error  shift, and go to state 369
    ID     shift, and go to state 180
    NUM    shift, and go to state 147

    ')'  reduce using rule 196 (INIT3)

    INIT2   go to state 181
    INIT3   go to state 370
    ID_NUM  go to state 154


state 300

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  197 EXP2: INIT2 . '<' INIT2 ';'
  198     | INIT2 . '>' INIT2 ';'
  199     | INIT2 . LE INIT2 ';'
  200     | INIT2 . GE INIT2 ';'
  201     | INIT2 . EQ INIT2 ';'
  202     | INIT2 . NE INIT2 ';'
  203     | INIT2 . OR INIT2 ';'
  204     | INIT2 . AND INIT2 ';'

    LE   shift, and go to state 371
    GE   shift, and go to state 372
    EQ   shift, and go to state 373
    NE   shift, and go to state 374
    OR   shift, and go to state 375
    AND  shift, and go to state 376
    '>'  shift, and go to state 377
    '<'  shift, and go to state 378
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209


state 301

  103 COND_C: FOR '(' error EXP2 . INIT3 ')' DEF_C
  107       | FOR '(' error EXP2 . error ')' DEF_C

    error  shift, and go to state 379
    ID     shift, and go to state 180
    NUM    shift, and go to state 147

    ')'  reduce using rule 196 (INIT3)

    INIT2   go to state 181
    INIT3   go to state 380
    ID_NUM  go to state 154


state 302

  164 INIT1: ID '=' . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 381
    ID_NUM  go to state 239


state 303

  104 COND_C: FOR '(' INIT1 error . INIT3 ')' DEF_C
  108       | FOR '(' INIT1 error . error ')' DEF_C

    error  shift, and go to state 382
    ID     shift, and go to state 180
    NUM    shift, and go to state 147

    ')'  reduce using rule 196 (INIT3)

    INIT2   go to state 181
    INIT3   go to state 383
    ID_NUM  go to state 154


state 304

  171 INIT1: INIT1 LE . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 384
    ID_NUM  go to state 239


state 305

  172 INIT1: INIT1 GE . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 385
    ID_NUM  go to state 239


state 306

  173 INIT1: INIT1 EQ . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 386
    ID_NUM  go to state 239


state 307

  174 INIT1: INIT1 NE . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 387
    ID_NUM  go to state 239


state 308

  175 INIT1: INIT1 OR . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 388
    ID_NUM  go to state 239


state 309

  176 INIT1: INIT1 AND . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 389
    ID_NUM  go to state 239


state 310

  170 INIT1: INIT1 '>' . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 390
    ID_NUM  go to state 239


state 311

  169 INIT1: INIT1 '<' . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 391
    ID_NUM  go to state 239


state 312

  165 INIT1: INIT1 '+' . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 392
    ID_NUM  go to state 239


state 313

  166 INIT1: INIT1 '-' . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 393
    ID_NUM  go to state 239


state 314

  167 INIT1: INIT1 '*' . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 394
    ID_NUM  go to state 239


state 315

  168 INIT1: INIT1 '/' . INIT1 ';'

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 395
    ID_NUM  go to state 239


state 316

  102 COND_C: FOR '(' INIT1 EXP2 . INIT3 ')' DEF_C
  105       | FOR '(' INIT1 EXP2 . error ')' DEF_C

    error  shift, and go to state 396
    ID     shift, and go to state 180
    NUM    shift, and go to state 147

    ')'  reduce using rule 196 (INIT3)

    INIT2   go to state 181
    INIT3   go to state 397
    ID_NUM  go to state 154


state 317

  159 BODY_C: COND_C .

    $default  reduce using rule 159 (BODY_C)


state 318

  151 DEF_C: '{' BODY_C . '}'
  157 BODY_C: BODY_C . BODY_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '}'      shift, and go to state 398

    error    [reduce using rule 160 (BODY_C)]
    RETURN   [reduce using rule 160 (BODY_C)]
    LONG     [reduce using rule 160 (BODY_C)]
    DOUBLE   [reduce using rule 160 (BODY_C)]
    INT      [reduce using rule 160 (BODY_C)]
    FLOAT    [reduce using rule 160 (BODY_C)]
    CHAR     [reduce using rule 160 (BODY_C)]
    SHORT    [reduce using rule 160 (BODY_C)]
    VOID     [reduce using rule 160 (BODY_C)]
    BOOLEAN  [reduce using rule 160 (BODY_C)]
    FOR      [reduce using rule 160 (BODY_C)]
    WHILE    [reduce using rule 160 (BODY_C)]
    IF       [reduce using rule 160 (BODY_C)]
    ID       [reduce using rule 160 (BODY_C)]
    NUM      [reduce using rule 160 (BODY_C)]
    '('      reduce using rule 160 (BODY_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      [reduce using rule 160 (BODY_C)]

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 317
    BODY_C  go to state 399
    INIT2   go to state 319
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 319

   45 EXP: INIT2 .
  158 BODY_C: INIT2 . ';'
  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  195 INIT3: INIT2 .

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    OR   shift, and go to state 202
    AND  shift, and go to state 203
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 400

    ';'       [reduce using rule 45 (EXP)]
    $default  reduce using rule 195 (INIT3)


state 320

  152 DEF_C: INIT2 ';' .

    $default  reduce using rule 152 (DEF_C)


state 321

  185 INIT2: INIT2 LE . INIT2
  207 COND1: '(' INIT2 LE . INIT2 ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 401
    ID_NUM  go to state 154


state 322

  186 INIT2: INIT2 GE . INIT2
  208 COND1: '(' INIT2 GE . INIT2 ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 402
    ID_NUM  go to state 154


state 323

  187 INIT2: INIT2 EQ . INIT2
  209 COND1: '(' INIT2 EQ . INIT2 ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 403
    ID_NUM  go to state 154


state 324

  188 INIT2: INIT2 NE . INIT2
  210 COND1: '(' INIT2 NE . INIT2 ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 404
    ID_NUM  go to state 154


state 325

  189 INIT2: INIT2 OR . INIT2
  211 COND1: '(' INIT2 OR . INIT2 ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 405
    ID_NUM  go to state 154


state 326

  190 INIT2: INIT2 AND . INIT2
  212 COND1: '(' INIT2 AND . INIT2 ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 406
    ID_NUM  go to state 154


state 327

  184 INIT2: INIT2 '>' . INIT2
  206 COND1: '(' INIT2 '>' . INIT2 ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 407
    ID_NUM  go to state 154


state 328

  183 INIT2: INIT2 '<' . INIT2
  205 COND1: '(' INIT2 '<' . INIT2 ')'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 408
    ID_NUM  go to state 154


state 329

  215 COND2: '(' ID_NUM ')' .

    $default  reduce using rule 215 (COND2)


state 330

  122 COND_C: ID '(' '"' ID . '"' ')' ';' COND_C
  123       | ID '(' '"' ID . '"' ')' ';'

    '"'  shift, and go to state 409


state 331

  116 COND_C: ID '(' '"' '%' . ID '"' ',' REA ')' ';' COND_C
  117       | ID '(' '"' '%' . ID '"' ',' REA ')' ';'
  118       | ID '(' '"' '%' . ID '"' ',' ARG ')' ';' COND_C
  119       | ID '(' '"' '%' . ID '"' ',' ARG ')' ';'

    ID  shift, and go to state 410


state 332

  120 COND_C: ID '(' ARG ')' . ';' COND_C
  121       | ID '(' ARG ')' . ';'
  194 INIT2: ID '(' ARG ')' .

    ';'  shift, and go to state 411

    ';'       [reduce using rule 194 (INIT2)]
    $default  reduce using rule 194 (INIT2)


state 333

   49 ARG: ID_NUM ',' . ARG

    ID   shift, and go to state 250
    NUM  shift, and go to state 147

    $default  reduce using rule 51 (ARG)

    ARG     go to state 412
    ID_NUM  go to state 253


state 334

  126 COND_C: DTYPE error ';' COND_C .

    $default  reduce using rule 126 (COND_C)


state 335

  128 COND_C: DTYPE ID error COND_C .

    $default  reduce using rule 128 (COND_C)


state 336

   97 COND_C: DTYPE ID ';' COND_C .

    $default  reduce using rule 97 (COND_C)


state 337

  101 COND_C: DTYPE ID '[' ID_NUM . ']' ';' COND_C

    ']'  shift, and go to state 413


state 338

  127 COND_C: DTYPE '*' error ';' . COND_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 414
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 339

   98 COND_C: DTYPE '*' ID ';' . COND_C
  100       | DTYPE '*' ID ';' .

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    error    [reduce using rule 100 (COND_C)]
    RETURN   [reduce using rule 100 (COND_C)]
    LONG     [reduce using rule 100 (COND_C)]
    DOUBLE   [reduce using rule 100 (COND_C)]
    INT      [reduce using rule 100 (COND_C)]
    FLOAT    [reduce using rule 100 (COND_C)]
    CHAR     [reduce using rule 100 (COND_C)]
    SHORT    [reduce using rule 100 (COND_C)]
    VOID     [reduce using rule 100 (COND_C)]
    BOOLEAN  [reduce using rule 100 (COND_C)]
    FOR      [reduce using rule 100 (COND_C)]
    WHILE    [reduce using rule 100 (COND_C)]
    IF       [reduce using rule 100 (COND_C)]
    ID       [reduce using rule 100 (COND_C)]
    NUM      [reduce using rule 100 (COND_C)]
    '('      reduce using rule 100 (COND_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 100 (COND_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 415
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 340

   46 EXP: INIT3 '(' INIT2 ')' .

    $default  reduce using rule 46 (EXP)


state 341

   80 FUNC_C: DTYPE error '(' error ')' '{' COND_C '}' FUNC_C .

    $default  reduce using rule 80 (FUNC_C)


state 342

   78 FUNC_C: DTYPE error '(' PARAM_C ')' '{' COND_C '}' FUNC_C .

    $default  reduce using rule 78 (FUNC_C)


state 343

   77 FUNC_C: DTYPE ID '(' error ')' '{' COND_C '}' FUNC_C .

    $default  reduce using rule 77 (FUNC_C)


state 344

   75 FUNC_C: DTYPE ID '(' PARAM_C ')' '{' COND_C '}' FUNC_C .

    $default  reduce using rule 75 (FUNC_C)


state 345

   39 PARAM_C: DTYPE ID '[' NUM ']' ',' PARAM_C .

    $default  reduce using rule 39 (PARAM_C)


state 346

  149 COND_J: error . ';' COND_J
  150       | error . DEF_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147
    ';'      shift, and go to state 416
    '{'      shift, and go to state 417

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 418
    DEF_J            go to state 419
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 347

  132 COND_J: FOR . '(' INIT1 EXP2 INIT3 ')' DEF_J

    '('  shift, and go to state 420


state 348

  133 COND_J: WHILE . COND1 DEF_J
  134       | WHILE . COND2 DEF_J

    '('  shift, and go to state 185

    COND1  go to state 421
    COND2  go to state 422


state 349

  135 COND_J: IF . COND1 DEF_J
  136       | IF . COND2 DEF_J

    '('  shift, and go to state 185

    COND1  go to state 423
    COND2  go to state 424


state 350

    8 CLASS_HIERARCHY: ID .
  144 COND_J: ID . '(' ARG ')' ';' COND_J
  145       | ID . '(' ARG ')' ';'
  178 INIT2: ID . '=' INIT2
  194      | ID . '(' ARG ')'
  213 ID_NUM: ID .

    '('  shift, and go to state 425
    '='  shift, and go to state 191

    '.'       reduce using rule 8 (CLASS_HIERARCHY)
    '('       [reduce using rule 8 (CLASS_HIERARCHY)]
    $default  reduce using rule 213 (ID_NUM)


state 351

    7 CLASS_HIERARCHY: CLASS_HIERARCHY . '.' ID
  140 COND_J: CLASS_HIERARCHY . '(' ID ')' ';' COND_J
  141       | CLASS_HIERARCHY . '(' '"' ID '"' ')' ';' COND_J
  142       | CLASS_HIERARCHY . '(' '"' ID '"' ')' ';'
  143       | CLASS_HIERARCHY . '(' ID ')' ';'

    '.'  shift, and go to state 50
    '('  shift, and go to state 426


state 352

  130 COND_J: DTYPE . ID ';' COND_J
  131       | DTYPE . ID '[' ']' '=' NEW DTYPE '[' ID_NUM ']' ';' COND_J
  146       | DTYPE . ID '[' ']' error COND_J
  147       | DTYPE . error ';' COND_J
  148       | DTYPE . ID error COND_J

    error  shift, and go to state 427
    ID     shift, and go to state 428


state 353

   88 FUNC_J: error ID '(' error ')' '{' COND_J . '}' FUNC_J

    '}'  shift, and go to state 429


state 354

  138 COND_J: INIT2 . ';' COND_J
  139       | INIT2 . ';'
  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    OR   shift, and go to state 202
    AND  shift, and go to state 203
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 430


state 355

  137 COND_J: RET .

    $default  reduce using rule 137 (COND_J)


state 356

   92 MAIN_J: PUBLIC error VOID MAIN '(' STRING ID . '[' ']' ')' '{' COND_J '}'

    '['  shift, and go to state 431


state 357

   93 MAIN_J: PUBLIC STATIC VOID error '(' STRING ID . '[' ']' ')' '{' COND_J '}'

    '['  shift, and go to state 432


state 358

   94 MAIN_J: PUBLIC STATIC VOID MAIN '(' error ')' . '{' COND_J '}'

    '{'  shift, and go to state 433


state 359

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID . '[' ']' ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC VOID MAIN '(' STRING ID . '[' ']' ')' '{' COND_J '}'

    '['  shift, and go to state 434


state 360

   31 PARAM: DTYPE ID ',' . PARAM

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    $default  reduce using rule 36 (PARAM)

    DTYPE  go to state 227
    PARAM  go to state 435


state 361

   33 PARAM: DTYPE ID '[' . NUM ']' ',' PARAM
   34      | DTYPE ID '[' . ']' ',' PARAM
   35      | DTYPE ID '[' . ']'

    NUM  shift, and go to state 436
    ']'  shift, and go to state 437


state 362

   86 FUNC_J: MODIFIER1 error ID '(' PARAM ')' '{' . COND_J '}' FUNC_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 438
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 363

   87 FUNC_J: MODIFIER1 DTYPE error '(' error ')' '{' . COND_J '}' FUNC_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 439
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 364

   85 FUNC_J: MODIFIER1 DTYPE error '(' PARAM ')' '{' . COND_J '}' FUNC_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 440
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 365

   84 FUNC_J: MODIFIER1 DTYPE ID '(' error ')' '{' . COND_J '}' FUNC_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 441
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 366

   82 FUNC_J: MODIFIER1 DTYPE ID '(' PARAM ')' '{' . COND_J '}' FUNC_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 442
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 367

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR '*' ID '[' . ']' ')' '{' COND_C '}'

    ']'  shift, and go to state 443


state 368

  194 INIT2: ID '(' ARG ')' .

    $default  reduce using rule 194 (INIT2)


state 369

  109 COND_C: FOR '(' error error error . ')' DEF_C

    ')'  shift, and go to state 444


state 370

  106 COND_C: FOR '(' error error INIT3 . ')' DEF_C

    ')'  shift, and go to state 445


state 371

  185 INIT2: INIT2 LE . INIT2
  199 EXP2: INIT2 LE . INIT2 ';'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 446
    ID_NUM  go to state 154


state 372

  186 INIT2: INIT2 GE . INIT2
  200 EXP2: INIT2 GE . INIT2 ';'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 447
    ID_NUM  go to state 154


state 373

  187 INIT2: INIT2 EQ . INIT2
  201 EXP2: INIT2 EQ . INIT2 ';'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 448
    ID_NUM  go to state 154


state 374

  188 INIT2: INIT2 NE . INIT2
  202 EXP2: INIT2 NE . INIT2 ';'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 449
    ID_NUM  go to state 154


state 375

  189 INIT2: INIT2 OR . INIT2
  203 EXP2: INIT2 OR . INIT2 ';'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 450
    ID_NUM  go to state 154


state 376

  190 INIT2: INIT2 AND . INIT2
  204 EXP2: INIT2 AND . INIT2 ';'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 451
    ID_NUM  go to state 154


state 377

  184 INIT2: INIT2 '>' . INIT2
  198 EXP2: INIT2 '>' . INIT2 ';'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 452
    ID_NUM  go to state 154


state 378

  183 INIT2: INIT2 '<' . INIT2
  197 EXP2: INIT2 '<' . INIT2 ';'

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    INIT2   go to state 453
    ID_NUM  go to state 154


state 379

  107 COND_C: FOR '(' error EXP2 error . ')' DEF_C

    ')'  shift, and go to state 454


state 380

  103 COND_C: FOR '(' error EXP2 INIT3 . ')' DEF_C

    ')'  shift, and go to state 455


state 381

  164 INIT1: ID '=' INIT1 . ';'
  165      | INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 456


state 382

  108 COND_C: FOR '(' INIT1 error error . ')' DEF_C

    ')'  shift, and go to state 457


state 383

  104 COND_C: FOR '(' INIT1 error INIT3 . ')' DEF_C

    ')'  shift, and go to state 458


state 384

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  171      | INIT1 LE INIT1 . ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 459


state 385

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  172      | INIT1 GE INIT1 . ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 460


state 386

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  173      | INIT1 EQ INIT1 . ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 461


state 387

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  174      | INIT1 NE INIT1 . ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 462


state 388

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  175      | INIT1 OR INIT1 . ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 463


state 389

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'
  176      | INIT1 AND INIT1 . ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 464


state 390

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  170      | INIT1 '>' INIT1 . ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 465


state 391

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  169      | INIT1 '<' INIT1 . ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 466


state 392

  165 INIT1: INIT1 . '+' INIT1 ';'
  165      | INIT1 '+' INIT1 . ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 467


state 393

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  166      | INIT1 '-' INIT1 . ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 468


state 394

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  167      | INIT1 '*' INIT1 . ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 469


state 395

  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  168      | INIT1 '/' INIT1 . ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315
    ';'  shift, and go to state 470


state 396

  105 COND_C: FOR '(' INIT1 EXP2 error . ')' DEF_C

    ')'  shift, and go to state 471


state 397

  102 COND_C: FOR '(' INIT1 EXP2 INIT3 . ')' DEF_C

    ')'  shift, and go to state 472


state 398

  151 DEF_C: '{' BODY_C '}' .

    $default  reduce using rule 151 (DEF_C)


state 399

  157 BODY_C: BODY_C . BODY_C
  157       | BODY_C BODY_C .

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    error    [reduce using rule 157 (BODY_C)]
    error    [reduce using rule 160 (BODY_C)]
    RETURN   [reduce using rule 157 (BODY_C)]
    RETURN   [reduce using rule 160 (BODY_C)]
    LONG     [reduce using rule 157 (BODY_C)]
    LONG     [reduce using rule 160 (BODY_C)]
    DOUBLE   [reduce using rule 157 (BODY_C)]
    DOUBLE   [reduce using rule 160 (BODY_C)]
    INT      [reduce using rule 157 (BODY_C)]
    INT      [reduce using rule 160 (BODY_C)]
    FLOAT    [reduce using rule 157 (BODY_C)]
    FLOAT    [reduce using rule 160 (BODY_C)]
    CHAR     [reduce using rule 157 (BODY_C)]
    CHAR     [reduce using rule 160 (BODY_C)]
    SHORT    [reduce using rule 157 (BODY_C)]
    SHORT    [reduce using rule 160 (BODY_C)]
    VOID     [reduce using rule 157 (BODY_C)]
    VOID     [reduce using rule 160 (BODY_C)]
    BOOLEAN  [reduce using rule 157 (BODY_C)]
    BOOLEAN  [reduce using rule 160 (BODY_C)]
    FOR      [reduce using rule 157 (BODY_C)]
    FOR      [reduce using rule 160 (BODY_C)]
    WHILE    [reduce using rule 157 (BODY_C)]
    WHILE    [reduce using rule 160 (BODY_C)]
    IF       [reduce using rule 157 (BODY_C)]
    IF       [reduce using rule 160 (BODY_C)]
    ID       [reduce using rule 157 (BODY_C)]
    ID       [reduce using rule 160 (BODY_C)]
    NUM      [reduce using rule 157 (BODY_C)]
    NUM      [reduce using rule 160 (BODY_C)]
    '('      reduce using rule 157 (BODY_C)
    '('      [reduce using rule 160 (BODY_C)]
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 157 (BODY_C)
    '}'      [reduce using rule 160 (BODY_C)]

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 317
    BODY_C  go to state 399
    INIT2   go to state 319
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 400

  158 BODY_C: INIT2 ';' .

    $default  reduce using rule 158 (BODY_C)


state 401

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  185      | INIT2 LE INIT2 .
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  207 COND1: '(' INIT2 LE INIT2 . ')'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ')'  shift, and go to state 473

    $default  reduce using rule 185 (INIT2)


state 402

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  186      | INIT2 GE INIT2 .
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  208 COND1: '(' INIT2 GE INIT2 . ')'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ')'  shift, and go to state 474

    $default  reduce using rule 186 (INIT2)


state 403

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  187      | INIT2 EQ INIT2 .
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  209 COND1: '(' INIT2 EQ INIT2 . ')'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ')'  shift, and go to state 475

    $default  reduce using rule 187 (INIT2)


state 404

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  188      | INIT2 NE INIT2 .
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  210 COND1: '(' INIT2 NE INIT2 . ')'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ')'  shift, and go to state 476

    $default  reduce using rule 188 (INIT2)


state 405

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  189      | INIT2 OR INIT2 .
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  211 COND1: '(' INIT2 OR INIT2 . ')'

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ')'  shift, and go to state 477

    $default  reduce using rule 189 (INIT2)


state 406

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  190      | INIT2 AND INIT2 .
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  212 COND1: '(' INIT2 AND INIT2 . ')'

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ')'  shift, and go to state 478

    $default  reduce using rule 190 (INIT2)


state 407

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  184      | INIT2 '>' INIT2 .
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  206 COND1: '(' INIT2 '>' INIT2 . ')'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ')'  shift, and go to state 479

    $default  reduce using rule 184 (INIT2)


state 408

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  183      | INIT2 '<' INIT2 .
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  205 COND1: '(' INIT2 '<' INIT2 . ')'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ')'  shift, and go to state 480

    $default  reduce using rule 183 (INIT2)


state 409

  122 COND_C: ID '(' '"' ID '"' . ')' ';' COND_C
  123       | ID '(' '"' ID '"' . ')' ';'

    ')'  shift, and go to state 481


state 410

  116 COND_C: ID '(' '"' '%' ID . '"' ',' REA ')' ';' COND_C
  117       | ID '(' '"' '%' ID . '"' ',' REA ')' ';'
  118       | ID '(' '"' '%' ID . '"' ',' ARG ')' ';' COND_C
  119       | ID '(' '"' '%' ID . '"' ',' ARG ')' ';'

    '"'  shift, and go to state 482


state 411

  120 COND_C: ID '(' ARG ')' ';' . COND_C
  121       | ID '(' ARG ')' ';' .

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    error    [reduce using rule 121 (COND_C)]
    RETURN   [reduce using rule 121 (COND_C)]
    LONG     [reduce using rule 121 (COND_C)]
    DOUBLE   [reduce using rule 121 (COND_C)]
    INT      [reduce using rule 121 (COND_C)]
    FLOAT    [reduce using rule 121 (COND_C)]
    CHAR     [reduce using rule 121 (COND_C)]
    SHORT    [reduce using rule 121 (COND_C)]
    VOID     [reduce using rule 121 (COND_C)]
    BOOLEAN  [reduce using rule 121 (COND_C)]
    FOR      [reduce using rule 121 (COND_C)]
    WHILE    [reduce using rule 121 (COND_C)]
    IF       [reduce using rule 121 (COND_C)]
    ID       [reduce using rule 121 (COND_C)]
    NUM      [reduce using rule 121 (COND_C)]
    '('      reduce using rule 121 (COND_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 121 (COND_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 483
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 412

   49 ARG: ID_NUM ',' ARG .

    $default  reduce using rule 49 (ARG)


state 413

  101 COND_C: DTYPE ID '[' ID_NUM ']' . ';' COND_C

    ';'  shift, and go to state 484


state 414

  127 COND_C: DTYPE '*' error ';' COND_C .

    $default  reduce using rule 127 (COND_C)


state 415

   98 COND_C: DTYPE '*' ID ';' COND_C .

    $default  reduce using rule 98 (COND_C)


state 416

  149 COND_J: error ';' . COND_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 485
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 417

  155 DEF_J: '{' . BODY_J '}'

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    error    [reduce using rule 163 (BODY_J)]
    RETURN   [reduce using rule 163 (BODY_J)]
    LONG     [reduce using rule 163 (BODY_J)]
    DOUBLE   [reduce using rule 163 (BODY_J)]
    INT      [reduce using rule 163 (BODY_J)]
    FLOAT    [reduce using rule 163 (BODY_J)]
    CHAR     [reduce using rule 163 (BODY_J)]
    SHORT    [reduce using rule 163 (BODY_J)]
    VOID     [reduce using rule 163 (BODY_J)]
    BOOLEAN  [reduce using rule 163 (BODY_J)]
    FOR      [reduce using rule 163 (BODY_J)]
    WHILE    [reduce using rule 163 (BODY_J)]
    IF       [reduce using rule 163 (BODY_J)]
    ID       [reduce using rule 163 (BODY_J)]
    NUM      [reduce using rule 163 (BODY_J)]
    '}'      reduce using rule 163 (BODY_J)

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 486
    BODY_J           go to state 487
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 418

  156 DEF_J: COND_J .

    $default  reduce using rule 156 (DEF_J)


state 419

  150 COND_J: error DEF_J .

    $default  reduce using rule 150 (COND_J)


state 420

  132 COND_J: FOR '(' . INIT1 EXP2 INIT3 ')' DEF_J

    ID   shift, and go to state 237
    NUM  shift, and go to state 147

    INIT1   go to state 488
    ID_NUM  go to state 239


state 421

  133 COND_J: WHILE COND1 . DEF_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147
    '{'      shift, and go to state 417

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 418
    DEF_J            go to state 489
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 422

  134 COND_J: WHILE COND2 . DEF_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147
    '{'      shift, and go to state 417

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 418
    DEF_J            go to state 490
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 423

  135 COND_J: IF COND1 . DEF_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147
    '{'      shift, and go to state 417

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 418
    DEF_J            go to state 491
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 424

  136 COND_J: IF COND2 . DEF_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147
    '{'      shift, and go to state 417

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 418
    DEF_J            go to state 492
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 425

  144 COND_J: ID '(' . ARG ')' ';' COND_J
  145       | ID '(' . ARG ')' ';'
  194 INIT2: ID '(' . ARG ')'

    ID   shift, and go to state 250
    NUM  shift, and go to state 147

    $default  reduce using rule 51 (ARG)

    ARG     go to state 493
    ID_NUM  go to state 253


state 426

  140 COND_J: CLASS_HIERARCHY '(' . ID ')' ';' COND_J
  141       | CLASS_HIERARCHY '(' . '"' ID '"' ')' ';' COND_J
  142       | CLASS_HIERARCHY '(' . '"' ID '"' ')' ';'
  143       | CLASS_HIERARCHY '(' . ID ')' ';'

    ID   shift, and go to state 494
    '"'  shift, and go to state 495


state 427

  147 COND_J: DTYPE error . ';' COND_J

    ';'  shift, and go to state 496


state 428

  130 COND_J: DTYPE ID . ';' COND_J
  131       | DTYPE ID . '[' ']' '=' NEW DTYPE '[' ID_NUM ']' ';' COND_J
  146       | DTYPE ID . '[' ']' error COND_J
  148       | DTYPE ID . error COND_J

    error  shift, and go to state 497
    ';'    shift, and go to state 498
    '['    shift, and go to state 499


state 429

   88 FUNC_J: error ID '(' error ')' '{' COND_J '}' . FUNC_J

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 500
    MAIN_J     go to state 82


state 430

  138 COND_J: INIT2 ';' . COND_J
  139       | INIT2 ';' .

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    error    [reduce using rule 139 (COND_J)]
    RETURN   [reduce using rule 139 (COND_J)]
    LONG     [reduce using rule 139 (COND_J)]
    DOUBLE   [reduce using rule 139 (COND_J)]
    INT      [reduce using rule 139 (COND_J)]
    FLOAT    [reduce using rule 139 (COND_J)]
    CHAR     [reduce using rule 139 (COND_J)]
    SHORT    [reduce using rule 139 (COND_J)]
    VOID     [reduce using rule 139 (COND_J)]
    BOOLEAN  [reduce using rule 139 (COND_J)]
    FOR      [reduce using rule 139 (COND_J)]
    WHILE    [reduce using rule 139 (COND_J)]
    IF       [reduce using rule 139 (COND_J)]
    ID       [reduce using rule 139 (COND_J)]
    NUM      [reduce using rule 139 (COND_J)]
    '}'      reduce using rule 139 (COND_J)

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 501
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 431

   92 MAIN_J: PUBLIC error VOID MAIN '(' STRING ID '[' . ']' ')' '{' COND_J '}'

    ']'  shift, and go to state 502


state 432

   93 MAIN_J: PUBLIC STATIC VOID error '(' STRING ID '[' . ']' ')' '{' COND_J '}'

    ']'  shift, and go to state 503


state 433

   94 MAIN_J: PUBLIC STATIC VOID MAIN '(' error ')' '{' . COND_J '}'

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 504
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 434

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' . ']' ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC VOID MAIN '(' STRING ID '[' . ']' ')' '{' COND_J '}'

    ']'  shift, and go to state 505


state 435

   31 PARAM: DTYPE ID ',' PARAM .

    $default  reduce using rule 31 (PARAM)


state 436

   33 PARAM: DTYPE ID '[' NUM . ']' ',' PARAM

    ']'  shift, and go to state 506


state 437

   34 PARAM: DTYPE ID '[' ']' . ',' PARAM
   35      | DTYPE ID '[' ']' .

    ','  shift, and go to state 507

    $default  reduce using rule 35 (PARAM)


state 438

   86 FUNC_J: MODIFIER1 error ID '(' PARAM ')' '{' COND_J . '}' FUNC_J

    '}'  shift, and go to state 508


state 439

   87 FUNC_J: MODIFIER1 DTYPE error '(' error ')' '{' COND_J . '}' FUNC_J

    '}'  shift, and go to state 509


state 440

   85 FUNC_J: MODIFIER1 DTYPE error '(' PARAM ')' '{' COND_J . '}' FUNC_J

    '}'  shift, and go to state 510


state 441

   84 FUNC_J: MODIFIER1 DTYPE ID '(' error ')' '{' COND_J . '}' FUNC_J

    '}'  shift, and go to state 511


state 442

   82 FUNC_J: MODIFIER1 DTYPE ID '(' PARAM ')' '{' COND_J . '}' FUNC_J

    '}'  shift, and go to state 512


state 443

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR '*' ID '[' ']' . ')' '{' COND_C '}'

    ')'  shift, and go to state 513


state 444

  109 COND_C: FOR '(' error error error ')' . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 514
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 445

  106 COND_C: FOR '(' error error INIT3 ')' . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 515
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 446

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  185      | INIT2 LE INIT2 .
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  199 EXP2: INIT2 LE INIT2 . ';'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 516

    $default  reduce using rule 185 (INIT2)


state 447

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  186      | INIT2 GE INIT2 .
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  200 EXP2: INIT2 GE INIT2 . ';'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 517

    $default  reduce using rule 186 (INIT2)


state 448

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  187      | INIT2 EQ INIT2 .
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  201 EXP2: INIT2 EQ INIT2 . ';'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 518

    $default  reduce using rule 187 (INIT2)


state 449

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  188      | INIT2 NE INIT2 .
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  202 EXP2: INIT2 NE INIT2 . ';'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 519

    $default  reduce using rule 188 (INIT2)


state 450

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  189      | INIT2 OR INIT2 .
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  203 EXP2: INIT2 OR INIT2 . ';'

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 520

    $default  reduce using rule 189 (INIT2)


state 451

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  190      | INIT2 AND INIT2 .
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  204 EXP2: INIT2 AND INIT2 . ';'

    LE   shift, and go to state 198
    GE   shift, and go to state 199
    EQ   shift, and go to state 200
    NE   shift, and go to state 201
    '>'  shift, and go to state 204
    '<'  shift, and go to state 205
    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 521

    $default  reduce using rule 190 (INIT2)


state 452

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  184      | INIT2 . '>' INIT2
  184      | INIT2 '>' INIT2 .
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  198 EXP2: INIT2 '>' INIT2 . ';'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 522

    $default  reduce using rule 184 (INIT2)


state 453

  179 INIT2: INIT2 . '+' INIT2
  180      | INIT2 . '-' INIT2
  181      | INIT2 . '*' INIT2
  182      | INIT2 . '/' INIT2
  183      | INIT2 . '<' INIT2
  183      | INIT2 '<' INIT2 .
  184      | INIT2 . '>' INIT2
  185      | INIT2 . LE INIT2
  186      | INIT2 . GE INIT2
  187      | INIT2 . EQ INIT2
  188      | INIT2 . NE INIT2
  189      | INIT2 . OR INIT2
  190      | INIT2 . AND INIT2
  191      | INIT2 . '+' '+'
  192      | INIT2 . '-' '-'
  197 EXP2: INIT2 '<' INIT2 . ';'

    '+'  shift, and go to state 206
    '-'  shift, and go to state 207
    '*'  shift, and go to state 208
    '/'  shift, and go to state 209
    ';'  shift, and go to state 523

    $default  reduce using rule 183 (INIT2)


state 454

  107 COND_C: FOR '(' error EXP2 error ')' . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 524
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 455

  103 COND_C: FOR '(' error EXP2 INIT3 ')' . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 525
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 456

  164 INIT1: ID '=' INIT1 ';' .

    $default  reduce using rule 164 (INIT1)


state 457

  108 COND_C: FOR '(' INIT1 error error ')' . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 526
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 458

  104 COND_C: FOR '(' INIT1 error INIT3 ')' . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 527
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 459

  171 INIT1: INIT1 LE INIT1 ';' .

    $default  reduce using rule 171 (INIT1)


state 460

  172 INIT1: INIT1 GE INIT1 ';' .

    $default  reduce using rule 172 (INIT1)


state 461

  173 INIT1: INIT1 EQ INIT1 ';' .

    $default  reduce using rule 173 (INIT1)


state 462

  174 INIT1: INIT1 NE INIT1 ';' .

    $default  reduce using rule 174 (INIT1)


state 463

  175 INIT1: INIT1 OR INIT1 ';' .

    $default  reduce using rule 175 (INIT1)


state 464

  176 INIT1: INIT1 AND INIT1 ';' .

    $default  reduce using rule 176 (INIT1)


state 465

  170 INIT1: INIT1 '>' INIT1 ';' .

    $default  reduce using rule 170 (INIT1)


state 466

  169 INIT1: INIT1 '<' INIT1 ';' .

    $default  reduce using rule 169 (INIT1)


state 467

  165 INIT1: INIT1 '+' INIT1 ';' .

    $default  reduce using rule 165 (INIT1)


state 468

  166 INIT1: INIT1 '-' INIT1 ';' .

    $default  reduce using rule 166 (INIT1)


state 469

  167 INIT1: INIT1 '*' INIT1 ';' .

    $default  reduce using rule 167 (INIT1)


state 470

  168 INIT1: INIT1 '/' INIT1 ';' .

    $default  reduce using rule 168 (INIT1)


state 471

  105 COND_C: FOR '(' INIT1 EXP2 error ')' . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 528
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 472

  102 COND_C: FOR '(' INIT1 EXP2 INIT3 ')' . DEF_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147
    '{'      shift, and go to state 240

    error    [reduce using rule 154 (DEF_C)]
    RETURN   [reduce using rule 154 (DEF_C)]
    LONG     [reduce using rule 154 (DEF_C)]
    DOUBLE   [reduce using rule 154 (DEF_C)]
    INT      [reduce using rule 154 (DEF_C)]
    FLOAT    [reduce using rule 154 (DEF_C)]
    CHAR     [reduce using rule 154 (DEF_C)]
    SHORT    [reduce using rule 154 (DEF_C)]
    VOID     [reduce using rule 154 (DEF_C)]
    BOOLEAN  [reduce using rule 154 (DEF_C)]
    FOR      [reduce using rule 154 (DEF_C)]
    WHILE    [reduce using rule 154 (DEF_C)]
    IF       [reduce using rule 154 (DEF_C)]
    ID       [reduce using rule 154 (DEF_C)]
    NUM      [reduce using rule 154 (DEF_C)]
    '('      reduce using rule 154 (DEF_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 154 (DEF_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 241
    DEF_C   go to state 529
    INIT2   go to state 243
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 473

  207 COND1: '(' INIT2 LE INIT2 ')' .

    $default  reduce using rule 207 (COND1)


state 474

  208 COND1: '(' INIT2 GE INIT2 ')' .

    $default  reduce using rule 208 (COND1)


state 475

  209 COND1: '(' INIT2 EQ INIT2 ')' .

    $default  reduce using rule 209 (COND1)


state 476

  210 COND1: '(' INIT2 NE INIT2 ')' .

    $default  reduce using rule 210 (COND1)


state 477

  211 COND1: '(' INIT2 OR INIT2 ')' .

    $default  reduce using rule 211 (COND1)


state 478

  212 COND1: '(' INIT2 AND INIT2 ')' .

    $default  reduce using rule 212 (COND1)


state 479

  206 COND1: '(' INIT2 '>' INIT2 ')' .

    $default  reduce using rule 206 (COND1)


state 480

  205 COND1: '(' INIT2 '<' INIT2 ')' .

    $default  reduce using rule 205 (COND1)


state 481

  122 COND_C: ID '(' '"' ID '"' ')' . ';' COND_C
  123       | ID '(' '"' ID '"' ')' . ';'

    ';'  shift, and go to state 530


state 482

  116 COND_C: ID '(' '"' '%' ID '"' . ',' REA ')' ';' COND_C
  117       | ID '(' '"' '%' ID '"' . ',' REA ')' ';'
  118       | ID '(' '"' '%' ID '"' . ',' ARG ')' ';' COND_C
  119       | ID '(' '"' '%' ID '"' . ',' ARG ')' ';'

    ','  shift, and go to state 531


state 483

  120 COND_C: ID '(' ARG ')' ';' COND_C .

    $default  reduce using rule 120 (COND_C)


state 484

  101 COND_C: DTYPE ID '[' ID_NUM ']' ';' . COND_C

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 532
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 485

  149 COND_J: error ';' COND_J .

    $default  reduce using rule 149 (COND_J)


state 486

  162 BODY_J: COND_J .

    $default  reduce using rule 162 (BODY_J)


state 487

  155 DEF_J: '{' BODY_J . '}'
  161 BODY_J: BODY_J . BODY_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147
    '}'      shift, and go to state 533

    error    [reduce using rule 163 (BODY_J)]
    RETURN   [reduce using rule 163 (BODY_J)]
    LONG     [reduce using rule 163 (BODY_J)]
    DOUBLE   [reduce using rule 163 (BODY_J)]
    INT      [reduce using rule 163 (BODY_J)]
    FLOAT    [reduce using rule 163 (BODY_J)]
    CHAR     [reduce using rule 163 (BODY_J)]
    SHORT    [reduce using rule 163 (BODY_J)]
    VOID     [reduce using rule 163 (BODY_J)]
    BOOLEAN  [reduce using rule 163 (BODY_J)]
    FOR      [reduce using rule 163 (BODY_J)]
    WHILE    [reduce using rule 163 (BODY_J)]
    IF       [reduce using rule 163 (BODY_J)]
    ID       [reduce using rule 163 (BODY_J)]
    NUM      [reduce using rule 163 (BODY_J)]
    '}'      [reduce using rule 163 (BODY_J)]

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 486
    BODY_J           go to state 534
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 488

  132 COND_J: FOR '(' INIT1 . EXP2 INIT3 ')' DEF_J
  165 INIT1: INIT1 . '+' INIT1 ';'
  166      | INIT1 . '-' INIT1 ';'
  167      | INIT1 . '*' INIT1 ';'
  168      | INIT1 . '/' INIT1 ';'
  169      | INIT1 . '<' INIT1 ';'
  170      | INIT1 . '>' INIT1 ';'
  171      | INIT1 . LE INIT1 ';'
  172      | INIT1 . GE INIT1 ';'
  173      | INIT1 . EQ INIT1 ';'
  174      | INIT1 . NE INIT1 ';'
  175      | INIT1 . OR INIT1 ';'
  176      | INIT1 . AND INIT1 ';'

    LE   shift, and go to state 304
    GE   shift, and go to state 305
    EQ   shift, and go to state 306
    NE   shift, and go to state 307
    OR   shift, and go to state 308
    AND  shift, and go to state 309
    ID   shift, and go to state 180
    NUM  shift, and go to state 147
    '>'  shift, and go to state 310
    '<'  shift, and go to state 311
    '+'  shift, and go to state 312
    '-'  shift, and go to state 313
    '*'  shift, and go to state 314
    '/'  shift, and go to state 315

    INIT2   go to state 300
    EXP2    go to state 535
    ID_NUM  go to state 154


state 489

  133 COND_J: WHILE COND1 DEF_J .

    $default  reduce using rule 133 (COND_J)


state 490

  134 COND_J: WHILE COND2 DEF_J .

    $default  reduce using rule 134 (COND_J)


state 491

  135 COND_J: IF COND1 DEF_J .

    $default  reduce using rule 135 (COND_J)


state 492

  136 COND_J: IF COND2 DEF_J .

    $default  reduce using rule 136 (COND_J)


state 493

  144 COND_J: ID '(' ARG . ')' ';' COND_J
  145       | ID '(' ARG . ')' ';'
  194 INIT2: ID '(' ARG . ')'

    ')'  shift, and go to state 536


state 494

  140 COND_J: CLASS_HIERARCHY '(' ID . ')' ';' COND_J
  143       | CLASS_HIERARCHY '(' ID . ')' ';'

    ')'  shift, and go to state 537


state 495

  141 COND_J: CLASS_HIERARCHY '(' '"' . ID '"' ')' ';' COND_J
  142       | CLASS_HIERARCHY '(' '"' . ID '"' ')' ';'

    ID  shift, and go to state 538


state 496

  147 COND_J: DTYPE error ';' . COND_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 539
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 497

  148 COND_J: DTYPE ID error . COND_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 540
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 498

  130 COND_J: DTYPE ID ';' . COND_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 541
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 499

  131 COND_J: DTYPE ID '[' . ']' '=' NEW DTYPE '[' ID_NUM ']' ';' COND_J
  146       | DTYPE ID '[' . ']' error COND_J

    ']'  shift, and go to state 542


state 500

   88 FUNC_J: error ID '(' error ')' '{' COND_J '}' FUNC_J .

    $default  reduce using rule 88 (FUNC_J)


state 501

  138 COND_J: INIT2 ';' COND_J .

    $default  reduce using rule 138 (COND_J)


state 502

   92 MAIN_J: PUBLIC error VOID MAIN '(' STRING ID '[' ']' . ')' '{' COND_J '}'

    ')'  shift, and go to state 543


state 503

   93 MAIN_J: PUBLIC STATIC VOID error '(' STRING ID '[' ']' . ')' '{' COND_J '}'

    ')'  shift, and go to state 544


state 504

   94 MAIN_J: PUBLIC STATIC VOID MAIN '(' error ')' '{' COND_J . '}'

    '}'  shift, and go to state 545


state 505

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' . ')' THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' . ')' '{' COND_J '}'

    ')'  shift, and go to state 546


state 506

   33 PARAM: DTYPE ID '[' NUM ']' . ',' PARAM

    ','  shift, and go to state 547


state 507

   34 PARAM: DTYPE ID '[' ']' ',' . PARAM

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    $default  reduce using rule 36 (PARAM)

    DTYPE  go to state 227
    PARAM  go to state 548


state 508

   86 FUNC_J: MODIFIER1 error ID '(' PARAM ')' '{' COND_J '}' . FUNC_J

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 549
    MAIN_J     go to state 82


state 509

   87 FUNC_J: MODIFIER1 DTYPE error '(' error ')' '{' COND_J '}' . FUNC_J

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 550
    MAIN_J     go to state 82


state 510

   85 FUNC_J: MODIFIER1 DTYPE error '(' PARAM ')' '{' COND_J '}' . FUNC_J

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 551
    MAIN_J     go to state 82


state 511

   84 FUNC_J: MODIFIER1 DTYPE ID '(' error ')' '{' COND_J '}' . FUNC_J

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 552
    MAIN_J     go to state 82


state 512

   82 FUNC_J: MODIFIER1 DTYPE ID '(' PARAM ')' '{' COND_J '}' . FUNC_J

    error      shift, and go to state 77
    PUBLIC     shift, and go to state 78
    PRIVATE    shift, and go to state 15
    PROTECTED  shift, and go to state 16
    STATIC     shift, and go to state 17

    error      [reduce using rule 68 (MODIFIER1)]
    LONG       reduce using rule 68 (MODIFIER1)
    DOUBLE     reduce using rule 68 (MODIFIER1)
    INT        reduce using rule 68 (MODIFIER1)
    FLOAT      reduce using rule 68 (MODIFIER1)
    CHAR       reduce using rule 68 (MODIFIER1)
    SHORT      reduce using rule 68 (MODIFIER1)
    VOID       reduce using rule 68 (MODIFIER1)
    BOOLEAN    reduce using rule 68 (MODIFIER1)
    PUBLIC     [reduce using rule 68 (MODIFIER1)]
    PRIVATE    [reduce using rule 68 (MODIFIER1)]
    PROTECTED  [reduce using rule 68 (MODIFIER1)]
    STATIC     [reduce using rule 68 (MODIFIER1)]
    '}'        reduce using rule 89 (FUNC_J)

    MODIFIER1  go to state 79
    MODIFIER   go to state 80
    FUNC_J     go to state 553
    MAIN_J     go to state 82


state 513

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR '*' ID '[' ']' ')' . '{' COND_C '}'

    '{'  shift, and go to state 554


state 514

  109 COND_C: FOR '(' error error error ')' DEF_C .

    $default  reduce using rule 109 (COND_C)


state 515

  106 COND_C: FOR '(' error error INIT3 ')' DEF_C .

    $default  reduce using rule 106 (COND_C)


state 516

  199 EXP2: INIT2 LE INIT2 ';' .

    $default  reduce using rule 199 (EXP2)


state 517

  200 EXP2: INIT2 GE INIT2 ';' .

    $default  reduce using rule 200 (EXP2)


state 518

  201 EXP2: INIT2 EQ INIT2 ';' .

    $default  reduce using rule 201 (EXP2)


state 519

  202 EXP2: INIT2 NE INIT2 ';' .

    $default  reduce using rule 202 (EXP2)


state 520

  203 EXP2: INIT2 OR INIT2 ';' .

    $default  reduce using rule 203 (EXP2)


state 521

  204 EXP2: INIT2 AND INIT2 ';' .

    $default  reduce using rule 204 (EXP2)


state 522

  198 EXP2: INIT2 '>' INIT2 ';' .

    $default  reduce using rule 198 (EXP2)


state 523

  197 EXP2: INIT2 '<' INIT2 ';' .

    $default  reduce using rule 197 (EXP2)


state 524

  107 COND_C: FOR '(' error EXP2 error ')' DEF_C .

    $default  reduce using rule 107 (COND_C)


state 525

  103 COND_C: FOR '(' error EXP2 INIT3 ')' DEF_C .

    $default  reduce using rule 103 (COND_C)


state 526

  108 COND_C: FOR '(' INIT1 error error ')' DEF_C .

    $default  reduce using rule 108 (COND_C)


state 527

  104 COND_C: FOR '(' INIT1 error INIT3 ')' DEF_C .

    $default  reduce using rule 104 (COND_C)


state 528

  105 COND_C: FOR '(' INIT1 EXP2 error ')' DEF_C .

    $default  reduce using rule 105 (COND_C)


state 529

  102 COND_C: FOR '(' INIT1 EXP2 INIT3 ')' DEF_C .

    $default  reduce using rule 102 (COND_C)


state 530

  122 COND_C: ID '(' '"' ID '"' ')' ';' . COND_C
  123       | ID '(' '"' ID '"' ')' ';' .

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    error    [reduce using rule 123 (COND_C)]
    RETURN   [reduce using rule 123 (COND_C)]
    LONG     [reduce using rule 123 (COND_C)]
    DOUBLE   [reduce using rule 123 (COND_C)]
    INT      [reduce using rule 123 (COND_C)]
    FLOAT    [reduce using rule 123 (COND_C)]
    CHAR     [reduce using rule 123 (COND_C)]
    SHORT    [reduce using rule 123 (COND_C)]
    VOID     [reduce using rule 123 (COND_C)]
    BOOLEAN  [reduce using rule 123 (COND_C)]
    FOR      [reduce using rule 123 (COND_C)]
    WHILE    [reduce using rule 123 (COND_C)]
    IF       [reduce using rule 123 (COND_C)]
    ID       [reduce using rule 123 (COND_C)]
    NUM      [reduce using rule 123 (COND_C)]
    '('      reduce using rule 123 (COND_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 123 (COND_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 555
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 531

  116 COND_C: ID '(' '"' '%' ID '"' ',' . REA ')' ';' COND_C
  117       | ID '(' '"' '%' ID '"' ',' . REA ')' ';'
  118       | ID '(' '"' '%' ID '"' ',' . ARG ')' ';' COND_C
  119       | ID '(' '"' '%' ID '"' ',' . ARG ')' ';'

    ID   shift, and go to state 250
    NUM  shift, and go to state 147
    '&'  shift, and go to state 556

    $default  reduce using rule 51 (ARG)

    ARG     go to state 557
    REA     go to state 558
    ID_NUM  go to state 559


state 532

  101 COND_C: DTYPE ID '[' ID_NUM ']' ';' COND_C .

    $default  reduce using rule 101 (COND_C)


state 533

  155 DEF_J: '{' BODY_J '}' .

    $default  reduce using rule 155 (DEF_J)


state 534

  161 BODY_J: BODY_J . BODY_J
  161       | BODY_J BODY_J .

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    error    [reduce using rule 161 (BODY_J)]
    error    [reduce using rule 163 (BODY_J)]
    RETURN   [reduce using rule 161 (BODY_J)]
    RETURN   [reduce using rule 163 (BODY_J)]
    LONG     [reduce using rule 161 (BODY_J)]
    LONG     [reduce using rule 163 (BODY_J)]
    DOUBLE   [reduce using rule 161 (BODY_J)]
    DOUBLE   [reduce using rule 163 (BODY_J)]
    INT      [reduce using rule 161 (BODY_J)]
    INT      [reduce using rule 163 (BODY_J)]
    FLOAT    [reduce using rule 161 (BODY_J)]
    FLOAT    [reduce using rule 163 (BODY_J)]
    CHAR     [reduce using rule 161 (BODY_J)]
    CHAR     [reduce using rule 163 (BODY_J)]
    SHORT    [reduce using rule 161 (BODY_J)]
    SHORT    [reduce using rule 163 (BODY_J)]
    VOID     [reduce using rule 161 (BODY_J)]
    VOID     [reduce using rule 163 (BODY_J)]
    BOOLEAN  [reduce using rule 161 (BODY_J)]
    BOOLEAN  [reduce using rule 163 (BODY_J)]
    FOR      [reduce using rule 161 (BODY_J)]
    FOR      [reduce using rule 163 (BODY_J)]
    WHILE    [reduce using rule 161 (BODY_J)]
    WHILE    [reduce using rule 163 (BODY_J)]
    IF       [reduce using rule 161 (BODY_J)]
    IF       [reduce using rule 163 (BODY_J)]
    ID       [reduce using rule 161 (BODY_J)]
    ID       [reduce using rule 163 (BODY_J)]
    NUM      [reduce using rule 161 (BODY_J)]
    NUM      [reduce using rule 163 (BODY_J)]
    '}'      reduce using rule 161 (BODY_J)
    '}'      [reduce using rule 163 (BODY_J)]

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 486
    BODY_J           go to state 534
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 535

  132 COND_J: FOR '(' INIT1 EXP2 . INIT3 ')' DEF_J

    ID   shift, and go to state 180
    NUM  shift, and go to state 147

    $default  reduce using rule 196 (INIT3)

    INIT2   go to state 181
    INIT3   go to state 560
    ID_NUM  go to state 154


state 536

  144 COND_J: ID '(' ARG ')' . ';' COND_J
  145       | ID '(' ARG ')' . ';'
  194 INIT2: ID '(' ARG ')' .

    ';'  shift, and go to state 561

    ';'       [reduce using rule 194 (INIT2)]
    $default  reduce using rule 194 (INIT2)


state 537

  140 COND_J: CLASS_HIERARCHY '(' ID ')' . ';' COND_J
  143       | CLASS_HIERARCHY '(' ID ')' . ';'

    ';'  shift, and go to state 562


state 538

  141 COND_J: CLASS_HIERARCHY '(' '"' ID . '"' ')' ';' COND_J
  142       | CLASS_HIERARCHY '(' '"' ID . '"' ')' ';'

    '"'  shift, and go to state 563


state 539

  147 COND_J: DTYPE error ';' COND_J .

    $default  reduce using rule 147 (COND_J)


state 540

  148 COND_J: DTYPE ID error COND_J .

    $default  reduce using rule 148 (COND_J)


state 541

  130 COND_J: DTYPE ID ';' COND_J .

    $default  reduce using rule 130 (COND_J)


state 542

  131 COND_J: DTYPE ID '[' ']' . '=' NEW DTYPE '[' ID_NUM ']' ';' COND_J
  146       | DTYPE ID '[' ']' . error COND_J

    error  shift, and go to state 564
    '='    shift, and go to state 565


state 543

   92 MAIN_J: PUBLIC error VOID MAIN '(' STRING ID '[' ']' ')' . '{' COND_J '}'

    '{'  shift, and go to state 566


state 544

   93 MAIN_J: PUBLIC STATIC VOID error '(' STRING ID '[' ']' ')' . '{' COND_J '}'

    '{'  shift, and go to state 567


state 545

   94 MAIN_J: PUBLIC STATIC VOID MAIN '(' error ')' '{' COND_J '}' .

    $default  reduce using rule 94 (MAIN_J)


state 546

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' . THROWS ID '{' COND_J '}'
   91       | PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' . '{' COND_J '}'

    THROWS  shift, and go to state 568
    '{'     shift, and go to state 569


state 547

   33 PARAM: DTYPE ID '[' NUM ']' ',' . PARAM

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    $default  reduce using rule 36 (PARAM)

    DTYPE  go to state 227
    PARAM  go to state 570


state 548

   34 PARAM: DTYPE ID '[' ']' ',' PARAM .

    $default  reduce using rule 34 (PARAM)


state 549

   86 FUNC_J: MODIFIER1 error ID '(' PARAM ')' '{' COND_J '}' FUNC_J .

    $default  reduce using rule 86 (FUNC_J)


state 550

   87 FUNC_J: MODIFIER1 DTYPE error '(' error ')' '{' COND_J '}' FUNC_J .

    $default  reduce using rule 87 (FUNC_J)


state 551

   85 FUNC_J: MODIFIER1 DTYPE error '(' PARAM ')' '{' COND_J '}' FUNC_J .

    $default  reduce using rule 85 (FUNC_J)


state 552

   84 FUNC_J: MODIFIER1 DTYPE ID '(' error ')' '{' COND_J '}' FUNC_J .

    $default  reduce using rule 84 (FUNC_J)


state 553

   82 FUNC_J: MODIFIER1 DTYPE ID '(' PARAM ')' '{' COND_J '}' FUNC_J .

    $default  reduce using rule 82 (FUNC_J)


state 554

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR '*' ID '[' ']' ')' '{' . COND_C '}'

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    '('  reduce using rule 196 (INIT3)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 571
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 555

  122 COND_C: ID '(' '"' ID '"' ')' ';' COND_C .

    $default  reduce using rule 122 (COND_C)


state 556

   52 REA: '&' . ID_NUM ',' REA
   54    | '&' . ID_NUM

    ID   shift, and go to state 250
    NUM  shift, and go to state 147

    ID_NUM  go to state 572


state 557

  118 COND_C: ID '(' '"' '%' ID '"' ',' ARG . ')' ';' COND_C
  119       | ID '(' '"' '%' ID '"' ',' ARG . ')' ';'

    ')'  shift, and go to state 573


state 558

  116 COND_C: ID '(' '"' '%' ID '"' ',' REA . ')' ';' COND_C
  117       | ID '(' '"' '%' ID '"' ',' REA . ')' ';'

    ')'  shift, and go to state 574


state 559

   49 ARG: ID_NUM . ',' ARG
   50    | ID_NUM .
   53 REA: ID_NUM . ',' REA
   55    | ID_NUM .

    ','  shift, and go to state 575

    ')'       reduce using rule 50 (ARG)
    ')'       [reduce using rule 55 (REA)]
    $default  reduce using rule 50 (ARG)


state 560

  132 COND_J: FOR '(' INIT1 EXP2 INIT3 . ')' DEF_J

    ')'  shift, and go to state 576


state 561

  144 COND_J: ID '(' ARG ')' ';' . COND_J
  145       | ID '(' ARG ')' ';' .

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    error    [reduce using rule 145 (COND_J)]
    RETURN   [reduce using rule 145 (COND_J)]
    LONG     [reduce using rule 145 (COND_J)]
    DOUBLE   [reduce using rule 145 (COND_J)]
    INT      [reduce using rule 145 (COND_J)]
    FLOAT    [reduce using rule 145 (COND_J)]
    CHAR     [reduce using rule 145 (COND_J)]
    SHORT    [reduce using rule 145 (COND_J)]
    VOID     [reduce using rule 145 (COND_J)]
    BOOLEAN  [reduce using rule 145 (COND_J)]
    FOR      [reduce using rule 145 (COND_J)]
    WHILE    [reduce using rule 145 (COND_J)]
    IF       [reduce using rule 145 (COND_J)]
    ID       [reduce using rule 145 (COND_J)]
    NUM      [reduce using rule 145 (COND_J)]
    '}'      reduce using rule 145 (COND_J)

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 577
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 562

  140 COND_J: CLASS_HIERARCHY '(' ID ')' ';' . COND_J
  143       | CLASS_HIERARCHY '(' ID ')' ';' .

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    error    [reduce using rule 143 (COND_J)]
    RETURN   [reduce using rule 143 (COND_J)]
    LONG     [reduce using rule 143 (COND_J)]
    DOUBLE   [reduce using rule 143 (COND_J)]
    INT      [reduce using rule 143 (COND_J)]
    FLOAT    [reduce using rule 143 (COND_J)]
    CHAR     [reduce using rule 143 (COND_J)]
    SHORT    [reduce using rule 143 (COND_J)]
    VOID     [reduce using rule 143 (COND_J)]
    BOOLEAN  [reduce using rule 143 (COND_J)]
    FOR      [reduce using rule 143 (COND_J)]
    WHILE    [reduce using rule 143 (COND_J)]
    IF       [reduce using rule 143 (COND_J)]
    ID       [reduce using rule 143 (COND_J)]
    NUM      [reduce using rule 143 (COND_J)]
    '}'      reduce using rule 143 (COND_J)

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 578
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 563

  141 COND_J: CLASS_HIERARCHY '(' '"' ID '"' . ')' ';' COND_J
  142       | CLASS_HIERARCHY '(' '"' ID '"' . ')' ';'

    ')'  shift, and go to state 579


state 564

  146 COND_J: DTYPE ID '[' ']' error . COND_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 580
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 565

  131 COND_J: DTYPE ID '[' ']' '=' . NEW DTYPE '[' ID_NUM ']' ';' COND_J

    NEW  shift, and go to state 581


state 566

   92 MAIN_J: PUBLIC error VOID MAIN '(' STRING ID '[' ']' ')' '{' . COND_J '}'

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 582
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 567

   93 MAIN_J: PUBLIC STATIC VOID error '(' STRING ID '[' ']' ')' '{' . COND_J '}'

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 583
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 568

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' THROWS . ID '{' COND_J '}'

    ID  shift, and go to state 584


state 569

   91 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' '{' . COND_J '}'

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 585
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 570

   33 PARAM: DTYPE ID '[' NUM ']' ',' PARAM .

    $default  reduce using rule 33 (PARAM)


state 571

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR '*' ID '[' ']' ')' '{' COND_C . '}'

    '}'  shift, and go to state 586


state 572

   52 REA: '&' ID_NUM . ',' REA
   54    | '&' ID_NUM .

    ','  shift, and go to state 587

    $default  reduce using rule 54 (REA)


state 573

  118 COND_C: ID '(' '"' '%' ID '"' ',' ARG ')' . ';' COND_C
  119       | ID '(' '"' '%' ID '"' ',' ARG ')' . ';'

    ';'  shift, and go to state 588


state 574

  116 COND_C: ID '(' '"' '%' ID '"' ',' REA ')' . ';' COND_C
  117       | ID '(' '"' '%' ID '"' ',' REA ')' . ';'

    ';'  shift, and go to state 589


state 575

   49 ARG: ID_NUM ',' . ARG
   53 REA: ID_NUM ',' . REA

    ID   shift, and go to state 250
    NUM  shift, and go to state 147
    '&'  shift, and go to state 556

    $default  reduce using rule 51 (ARG)

    ARG     go to state 412
    REA     go to state 590
    ID_NUM  go to state 559


state 576

  132 COND_J: FOR '(' INIT1 EXP2 INIT3 ')' . DEF_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147
    '{'      shift, and go to state 417

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 418
    DEF_J            go to state 591
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 577

  144 COND_J: ID '(' ARG ')' ';' COND_J .

    $default  reduce using rule 144 (COND_J)


state 578

  140 COND_J: CLASS_HIERARCHY '(' ID ')' ';' COND_J .

    $default  reduce using rule 140 (COND_J)


state 579

  141 COND_J: CLASS_HIERARCHY '(' '"' ID '"' ')' . ';' COND_J
  142       | CLASS_HIERARCHY '(' '"' ID '"' ')' . ';'

    ';'  shift, and go to state 592


state 580

  146 COND_J: DTYPE ID '[' ']' error COND_J .

    $default  reduce using rule 146 (COND_J)


state 581

  131 COND_J: DTYPE ID '[' ']' '=' NEW . DTYPE '[' ID_NUM ']' ';' COND_J

    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13

    DTYPE  go to state 593


state 582

   92 MAIN_J: PUBLIC error VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J . '}'

    '}'  shift, and go to state 594


state 583

   93 MAIN_J: PUBLIC STATIC VOID error '(' STRING ID '[' ']' ')' '{' COND_J . '}'

    '}'  shift, and go to state 595


state 584

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' THROWS ID . '{' COND_J '}'

    '{'  shift, and go to state 596


state 585

   91 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J . '}'

    '}'  shift, and go to state 597


state 586

   95 MAIN_C: INT MAIN '(' INT ID ',' CHAR '*' ID '[' ']' ')' '{' COND_C '}' .

    $default  reduce using rule 95 (MAIN_C)


state 587

   52 REA: '&' ID_NUM ',' . REA

    ID   shift, and go to state 250
    NUM  shift, and go to state 147
    '&'  shift, and go to state 556

    REA     go to state 598
    ID_NUM  go to state 599


state 588

  118 COND_C: ID '(' '"' '%' ID '"' ',' ARG ')' ';' . COND_C
  119       | ID '(' '"' '%' ID '"' ',' ARG ')' ';' .

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    error    [reduce using rule 119 (COND_C)]
    RETURN   [reduce using rule 119 (COND_C)]
    LONG     [reduce using rule 119 (COND_C)]
    DOUBLE   [reduce using rule 119 (COND_C)]
    INT      [reduce using rule 119 (COND_C)]
    FLOAT    [reduce using rule 119 (COND_C)]
    CHAR     [reduce using rule 119 (COND_C)]
    SHORT    [reduce using rule 119 (COND_C)]
    VOID     [reduce using rule 119 (COND_C)]
    BOOLEAN  [reduce using rule 119 (COND_C)]
    FOR      [reduce using rule 119 (COND_C)]
    WHILE    [reduce using rule 119 (COND_C)]
    IF       [reduce using rule 119 (COND_C)]
    ID       [reduce using rule 119 (COND_C)]
    NUM      [reduce using rule 119 (COND_C)]
    '('      reduce using rule 119 (COND_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 119 (COND_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 600
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 589

  116 COND_C: ID '(' '"' '%' ID '"' ',' REA ')' ';' . COND_C
  117       | ID '(' '"' '%' ID '"' ',' REA ')' ';' .

    error    shift, and go to state 141
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 143
    WHILE    shift, and go to state 144
    IF       shift, and go to state 145
    ID       shift, and go to state 146
    NUM      shift, and go to state 147

    error    [reduce using rule 117 (COND_C)]
    RETURN   [reduce using rule 117 (COND_C)]
    LONG     [reduce using rule 117 (COND_C)]
    DOUBLE   [reduce using rule 117 (COND_C)]
    INT      [reduce using rule 117 (COND_C)]
    FLOAT    [reduce using rule 117 (COND_C)]
    CHAR     [reduce using rule 117 (COND_C)]
    SHORT    [reduce using rule 117 (COND_C)]
    VOID     [reduce using rule 117 (COND_C)]
    BOOLEAN  [reduce using rule 117 (COND_C)]
    FOR      [reduce using rule 117 (COND_C)]
    WHILE    [reduce using rule 117 (COND_C)]
    IF       [reduce using rule 117 (COND_C)]
    ID       [reduce using rule 117 (COND_C)]
    NUM      [reduce using rule 117 (COND_C)]
    '('      reduce using rule 117 (COND_C)
    '('      [reduce using rule 196 (INIT3)]
    '}'      reduce using rule 117 (COND_C)

    DTYPE   go to state 148
    EXP     go to state 149
    VAR     go to state 150
    COND_C  go to state 601
    INIT2   go to state 152
    INIT3   go to state 153
    ID_NUM  go to state 154
    RET     go to state 155


state 590

   53 REA: ID_NUM ',' REA .

    $default  reduce using rule 53 (REA)


state 591

  132 COND_J: FOR '(' INIT1 EXP2 INIT3 ')' DEF_J .

    $default  reduce using rule 132 (COND_J)


state 592

  141 COND_J: CLASS_HIERARCHY '(' '"' ID '"' ')' ';' . COND_J
  142       | CLASS_HIERARCHY '(' '"' ID '"' ')' ';' .

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    error    [reduce using rule 142 (COND_J)]
    RETURN   [reduce using rule 142 (COND_J)]
    LONG     [reduce using rule 142 (COND_J)]
    DOUBLE   [reduce using rule 142 (COND_J)]
    INT      [reduce using rule 142 (COND_J)]
    FLOAT    [reduce using rule 142 (COND_J)]
    CHAR     [reduce using rule 142 (COND_J)]
    SHORT    [reduce using rule 142 (COND_J)]
    VOID     [reduce using rule 142 (COND_J)]
    BOOLEAN  [reduce using rule 142 (COND_J)]
    FOR      [reduce using rule 142 (COND_J)]
    WHILE    [reduce using rule 142 (COND_J)]
    IF       [reduce using rule 142 (COND_J)]
    ID       [reduce using rule 142 (COND_J)]
    NUM      [reduce using rule 142 (COND_J)]
    '}'      reduce using rule 142 (COND_J)

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 602
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 593

  131 COND_J: DTYPE ID '[' ']' '=' NEW DTYPE . '[' ID_NUM ']' ';' COND_J

    '['  shift, and go to state 603


state 594

   92 MAIN_J: PUBLIC error VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}' .

    $default  reduce using rule 92 (MAIN_J)


state 595

   93 MAIN_J: PUBLIC STATIC VOID error '(' STRING ID '[' ']' ')' '{' COND_J '}' .

    $default  reduce using rule 93 (MAIN_J)


state 596

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' THROWS ID '{' . COND_J '}'

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 604
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 597

   91 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' '{' COND_J '}' .

    $default  reduce using rule 91 (MAIN_J)


state 598

   52 REA: '&' ID_NUM ',' REA .

    $default  reduce using rule 52 (REA)


state 599

   53 REA: ID_NUM . ',' REA
   55    | ID_NUM .

    ','  shift, and go to state 605

    $default  reduce using rule 55 (REA)


state 600

  118 COND_C: ID '(' '"' '%' ID '"' ',' ARG ')' ';' COND_C .

    $default  reduce using rule 118 (COND_C)


state 601

  116 COND_C: ID '(' '"' '%' ID '"' ',' REA ')' ';' COND_C .

    $default  reduce using rule 116 (COND_C)


state 602

  141 COND_J: CLASS_HIERARCHY '(' '"' ID '"' ')' ';' COND_J .

    $default  reduce using rule 141 (COND_J)


state 603

  131 COND_J: DTYPE ID '[' ']' '=' NEW DTYPE '[' . ID_NUM ']' ';' COND_J

    ID   shift, and go to state 250
    NUM  shift, and go to state 147

    ID_NUM  go to state 606


state 604

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' THROWS ID '{' COND_J . '}'

    '}'  shift, and go to state 607


state 605

   53 REA: ID_NUM ',' . REA

    ID   shift, and go to state 250
    NUM  shift, and go to state 147
    '&'  shift, and go to state 556

    REA     go to state 590
    ID_NUM  go to state 599


state 606

  131 COND_J: DTYPE ID '[' ']' '=' NEW DTYPE '[' ID_NUM . ']' ';' COND_J

    ']'  shift, and go to state 608


state 607

   90 MAIN_J: PUBLIC STATIC VOID MAIN '(' STRING ID '[' ']' ')' THROWS ID '{' COND_J '}' .

    $default  reduce using rule 90 (MAIN_J)


state 608

  131 COND_J: DTYPE ID '[' ']' '=' NEW DTYPE '[' ID_NUM ']' . ';' COND_J

    ';'  shift, and go to state 609


state 609

  131 COND_J: DTYPE ID '[' ']' '=' NEW DTYPE '[' ID_NUM ']' ';' . COND_J

    error    shift, and go to state 346
    RETURN   shift, and go to state 142
    LONG     shift, and go to state 6
    DOUBLE   shift, and go to state 7
    INT      shift, and go to state 68
    FLOAT    shift, and go to state 9
    CHAR     shift, and go to state 10
    SHORT    shift, and go to state 11
    VOID     shift, and go to state 12
    BOOLEAN  shift, and go to state 13
    FOR      shift, and go to state 347
    WHILE    shift, and go to state 348
    IF       shift, and go to state 349
    ID       shift, and go to state 350
    NUM      shift, and go to state 147

    CLASS_HIERARCHY  go to state 351
    DTYPE            go to state 352
    COND_J           go to state 610
    INIT2            go to state 354
    ID_NUM           go to state 154
    RET              go to state 355


state 610

  131 COND_J: DTYPE ID '[' ']' '=' NEW DTYPE '[' ID_NUM ']' ';' COND_J .

    $default  reduce using rule 131 (COND_J)
